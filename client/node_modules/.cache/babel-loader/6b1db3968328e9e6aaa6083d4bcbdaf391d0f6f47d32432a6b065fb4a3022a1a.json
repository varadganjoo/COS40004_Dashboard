{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Modal.js\";\nimport React from \"react\";\nimport './';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Modal(_ref) {\n  let {\n    device,\n    boards,\n    states,\n    onClose\n  } = _ref;\n  const checkState = sensor => {\n    const state = states.find(state => state.device_name === device.Name && state.sensor_name === sensor.name);\n    if (state) {\n      switch (state.condition) {\n        case \"<\":\n          return sensor.value < state.parameter ? state.name : \"\";\n        case \">\":\n          return sensor.value > state.parameter ? state.name : \"\";\n        // Add other conditions as needed\n        default:\n          return \"\";\n      }\n    } else {\n      return \"\";\n    }\n  };\n\n  // Get the most recent board data for this device\n  const deviceBoards = boards.filter(board => board.device_id === device._id);\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close-button\",\n        onClick: onClose,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: device.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), recentBoard && recentBoard.sensors.map(sensor => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [sensor.name, \": \", sensor.value, \" | State: \", checkState(sensor)]\n      }, sensor.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Modal","_ref","device","boards","states","onClose","checkState","sensor","state","find","device_name","Name","sensor_name","name","condition","value","parameter","deviceBoards","filter","board","device_id","_id","sort","a","b","Date","timestamp","recentBoard","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","sensors","map","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Modal.js"],"sourcesContent":["import React from \"react\";\r\nimport './'\r\n\r\nfunction Modal({ device, boards, states, onClose }) {\r\n  const checkState = (sensor) => {\r\n    const state = states.find(\r\n      (state) =>\r\n        state.device_name === device.Name && state.sensor_name === sensor.name\r\n    );\r\n    if (state) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          return sensor.value < state.parameter ? state.name : \"\";\r\n        case \">\":\r\n          return sensor.value > state.parameter ? state.name : \"\";\r\n        // Add other conditions as needed\r\n        default:\r\n          return \"\";\r\n      }\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  // Get the most recent board data for this device\r\n  const deviceBoards = boards.filter((board) => board.device_id === device._id);\r\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n  const recentBoard = deviceBoards[0];\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <span className=\"close-button\" onClick={onClose}>\r\n          &times;\r\n        </span>\r\n        <h2>{device.Name}</h2>\r\n        {recentBoard &&\r\n          recentBoard.sensors.map((sensor) => (\r\n            <div key={sensor.name}>\r\n              {sensor.name}: {sensor.value} | State: {checkState(sensor)}\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,IAAI;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEX,SAASC,KAAKA,CAAAC,IAAA,EAAsC;EAAA,IAArC;IAAEC,MAAM;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAAQ,CAAC,GAAAJ,IAAA;EAChD,MAAMK,UAAU,GAAIC,MAAM,IAAK;IAC7B,MAAMC,KAAK,GAAGJ,MAAM,CAACK,IAAI,CACtBD,KAAK,IACJA,KAAK,CAACE,WAAW,KAAKR,MAAM,CAACS,IAAI,IAAIH,KAAK,CAACI,WAAW,KAAKL,MAAM,CAACM,IACtE,CAAC;IACD,IAAIL,KAAK,EAAE;MACT,QAAQA,KAAK,CAACM,SAAS;QACrB,KAAK,GAAG;UACN,OAAOP,MAAM,CAACQ,KAAK,GAAGP,KAAK,CAACQ,SAAS,GAAGR,KAAK,CAACK,IAAI,GAAG,EAAE;QACzD,KAAK,GAAG;UACN,OAAON,MAAM,CAACQ,KAAK,GAAGP,KAAK,CAACQ,SAAS,GAAGR,KAAK,CAACK,IAAI,GAAG,EAAE;QACzD;QACA;UACE,OAAO,EAAE;MACb;IACF,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;;EAED;EACA,MAAMI,YAAY,GAAGd,MAAM,CAACe,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,SAAS,KAAKlB,MAAM,CAACmB,GAAG,CAAC;EAC7EJ,YAAY,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,GAAG,IAAID,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAAC;EAC1E,MAAMC,WAAW,GAAGV,YAAY,CAAC,CAAC,CAAC;EAEnC,oBACElB,OAAA;IAAK6B,SAAS,EAAC,OAAO;IAAAC,QAAA,eACpB9B,OAAA;MAAK6B,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5B9B,OAAA;QAAM6B,SAAS,EAAC,cAAc;QAACE,OAAO,EAAEzB,OAAQ;QAAAwB,QAAA,EAAC;MAEjD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACPnC,OAAA;QAAA8B,QAAA,EAAK3B,MAAM,CAACS;MAAI;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACrBP,WAAW,IACVA,WAAW,CAACQ,OAAO,CAACC,GAAG,CAAE7B,MAAM,iBAC7BR,OAAA;QAAA8B,QAAA,GACGtB,MAAM,CAACM,IAAI,EAAC,IAAE,EAACN,MAAM,CAACQ,KAAK,EAAC,YAAU,EAACT,UAAU,CAACC,MAAM,CAAC;MAAA,GADlDA,MAAM,CAACM,IAAI;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEhB,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACG,EAAA,GA1CQrC,KAAK;AA4Cd,eAAeA,KAAK;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}