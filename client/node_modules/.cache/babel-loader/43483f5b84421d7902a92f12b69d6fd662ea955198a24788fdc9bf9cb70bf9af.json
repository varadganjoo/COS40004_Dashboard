{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Query() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [deviceData, setDeviceData] = useState([]);\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => setDevices(data));\n    devices.forEach(device => {\n      fetch(`/boards/device/${device._id}`).then(response => response.json()).then(board => {\n        // store device name along with the board data\n        const dataWithDeviceName = {\n          ...board,\n          deviceName: device.name\n        };\n        setDeviceData(prevData => [...prevData, dataWithDeviceName]);\n      }).catch(error => console.error(\"Failed to fetch data:\", error));\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Query Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), deviceData.map((device, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Device: \", device.deviceName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Timestamp: \", new Date(device.timestamp).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), device.sensors.map((sensor, sensorIndex) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [sensor.name, \": \", sensor.value]\n      }, sensorIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(Query, \"WVXu8fhT1qnso9EWYqSOYOi9Ww0=\");\n_c = Query;\nexport { Query };\nvar _c;\n$RefreshReg$(_c, \"Query\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Query","_s","devices","setDevices","deviceData","setDeviceData","fetch","then","response","json","data","forEach","device","_id","board","dataWithDeviceName","deviceName","name","prevData","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","Date","timestamp","toLocaleString","sensors","sensor","sensorIndex","value","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [deviceData, setDeviceData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => setDevices(data));\r\n  \r\n    devices.forEach((device) => {\r\n      fetch(`/boards/device/${device._id}`)\r\n        .then((response) => response.json())\r\n        .then((board) => {\r\n          // store device name along with the board data\r\n          const dataWithDeviceName = { ...board, deviceName: device.name };\r\n          setDeviceData((prevData) => [...prevData, dataWithDeviceName]);\r\n        })\r\n        .catch((error) => console.error(\"Failed to fetch data:\", error));\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Query Page</h1>\r\n      {deviceData.map((device, index) => (\r\n        <div key={index}>\r\n          <h2>Device: {device.deviceName}</h2>\r\n          <h2>Timestamp: {new Date(device.timestamp).toLocaleString()}</h2>\r\n          {device.sensors.map((sensor, sensorIndex) => (\r\n            <p key={sensorIndex}>\r\n              {sensor.name}: {sensor.value}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,UAAU,CAAC,CACdC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKP,UAAU,CAACO,IAAI,CAAC,CAAC;IAEnCR,OAAO,CAACS,OAAO,CAAEC,MAAM,IAAK;MAC1BN,KAAK,CAAE,kBAAiBM,MAAM,CAACC,GAAI,EAAC,CAAC,CAClCN,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEO,KAAK,IAAK;QACf;QACA,MAAMC,kBAAkB,GAAG;UAAE,GAAGD,KAAK;UAAEE,UAAU,EAAEJ,MAAM,CAACK;QAAK,CAAC;QAChEZ,aAAa,CAAEa,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAEH,kBAAkB,CAAC,CAAC;MAChE,CAAC,CAAC,CACDI,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;IACpE,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACErB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAClBtB,UAAU,CAACuB,GAAG,CAAC,CAACf,MAAM,EAAEgB,KAAK,kBAC5B7B,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,GAAI,UAAQ,EAACV,MAAM,CAACI,UAAU;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpC3B,OAAA;QAAAuB,QAAA,GAAI,aAAW,EAAC,IAAIO,IAAI,CAACjB,MAAM,CAACkB,SAAS,CAAC,CAACC,cAAc,CAAC,CAAC;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAChEd,MAAM,CAACoB,OAAO,CAACL,GAAG,CAAC,CAACM,MAAM,EAAEC,WAAW,kBACtCnC,OAAA;QAAAuB,QAAA,GACGW,MAAM,CAAChB,IAAI,EAAC,IAAE,EAACgB,MAAM,CAACE,KAAK;MAAA,GADtBD,WAAW;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEhB,CACJ,CAAC;IAAA,GAPME,KAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQV,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACzB,EAAA,CArCQD,KAAK;AAAAoC,EAAA,GAALpC,KAAK;AAuCd,SAASA,KAAK;AAAG,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}