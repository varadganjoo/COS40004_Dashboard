{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n// import \"./Query.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Query() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [states, setStates] = useState([]);\n  const [boards, setBoards] = useState([]);\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => setDevices(data));\n    fetch(\"/states\").then(response => response.json()).then(data => setStates(data));\n    fetch(\"/boards\").then(response => response.json()).then(data => setBoards(data));\n  }, []);\n  const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\n    const matchingStates = states.filter(state => {\n      const passCondition = state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n      return passCondition;\n    });\n    let result = \"Default\";\n    for (let state of matchingStates) {\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < state.parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > state.parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= state.parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= state.parameter) result = state.name;\n          break;\n        case \"=\":\n          if (sensorValue === state.parameter) result = state.name;\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"query\",\n    children: devices.map(device => {\n      const deviceBoards = boards.filter(board => board.device_id === device._id);\n      deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n      const recentBoard = deviceBoards[0];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"device-data\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: device.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), recentBoard && /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Sensor Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Value\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"State\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: recentBoard.sensors.map((sensor, sensorIndex) => {\n              const state = checkStateForIndividualSensor(sensor.name, sensor.value, device.name);\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: state\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 25\n                }, this)]\n              }, `${sensor.name}-${sensorIndex}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this)]\n      }, device._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(Query, \"H5fwW+K6HX8v7famTy68dP7amHQ=\");\n_c = Query;\nexport { Query };\nvar _c;\n$RefreshReg$(_c, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Query","_s","devices","setDevices","states","setStates","boards","setBoards","fetch","then","response","json","data","checkStateForIndividualSensor","sensorName","sensorValue","deviceName","matchingStates","filter","state","passCondition","device_name","toLowerCase","sensor_name","result","condition","parameter","name","className","children","map","device","deviceBoards","board","device_id","_id","sort","a","b","Date","timestamp","recentBoard","fileName","_jsxFileName","lineNumber","columnNumber","sensors","sensor","sensorIndex","value","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n// import \"./Query.css\";\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => setDevices(data));\r\n\r\n    fetch(\"/states\")\r\n      .then((response) => response.json())\r\n      .then((data) => setStates(data));\r\n\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => setBoards(data));\r\n  }, []);\r\n\r\n  const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\r\n    const matchingStates = states.filter((state) => {\r\n      const passCondition =\r\n        state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase();\r\n      return passCondition;\r\n    });\r\n\r\n    let result = \"Default\";\r\n\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"=\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <div className=\"query\">\r\n      {devices.map((device) => {\r\n        const deviceBoards = boards.filter(\r\n          (board) => board.device_id === device._id\r\n        );\r\n        deviceBoards.sort(\r\n          (a, b) => new Date(b.timestamp) - new Date(a.timestamp)\r\n        );\r\n        const recentBoard = deviceBoards[0];\r\n\r\n        return (\r\n          <div key={device._id} className=\"device-data\">\r\n            <h2>{device.name}</h2>\r\n            {recentBoard && (\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Sensor Name</th>\r\n                    <th>Value</th>\r\n                    <th>State</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {recentBoard.sensors.map((sensor, sensorIndex) => {\r\n                    const state = checkStateForIndividualSensor(\r\n                      sensor.name,\r\n                      sensor.value,\r\n                      device.name\r\n                    );\r\n                    return (\r\n                      <tr key={`${sensor.name}-${sensorIndex}`}>\r\n                        <td>{sensor.name}</td>\r\n                        <td>{sensor.value}</td>\r\n                        <td>{state}</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}