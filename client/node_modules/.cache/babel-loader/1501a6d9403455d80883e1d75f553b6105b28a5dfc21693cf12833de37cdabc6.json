{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n// import \"./Query.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Query() {\n  _s();\n  var _devices$find;\n  const [devices, setDevices] = useState([]);\n  const [states, setStates] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => {\n      var _data$;\n      setDevices(data);\n      setSelectedDevice((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$._id); // set the selected device to the first device by default\n    });\n\n    fetch(\"/states\").then(response => response.json()).then(data => setStates(data));\n    fetch(\"/boards\").then(response => response.json()).then(data => setBoards(data));\n  }, []);\n  const handleDeviceSelect = event => {\n    setSelectedDevice(event.target.value);\n  };\n  const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\n    const matchingStates = states.filter(state => {\n      return state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n    });\n    let result = \"Default\";\n    for (let state of matchingStates) {\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < state.parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > state.parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= state.parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= state.parameter) result = state.name;\n          break;\n        case \"=\":\n          if (sensorValue === state.parameter) result = state.name;\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n  const deviceBoards = boards.filter(board => board.device_id === selectedDevice);\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  const deviceName = (_devices$find = devices.find(device => device._id === selectedDevice)) === null || _devices$find === void 0 ? void 0 : _devices$find.name;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"query\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"device-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"device-select\",\n        children: \"Select a device:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"device-select\",\n        value: selectedDevice,\n        onChange: handleDeviceSelect,\n        children: devices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: device._id,\n          children: device.name\n        }, device._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Latest Board Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), recentBoard ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Timestamp: \", new Date(recentBoard.timestamp).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Device ID: \", recentBoard.device_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), recentBoard.sensors.map((sensor, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor Name: \", sensor.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor Value: \", sensor.value]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor State: \", checkStateForIndividualSensor(sensor.name, sensor.value, deviceName)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No board data available for this device.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(Query, \"Xv2dxjYXKbrPHczxRrrR0E3Ag3c=\");\n_c = Query;\nexport { Query };\nvar _c;\n$RefreshReg$(_c, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Query","_s","_devices$find","devices","setDevices","states","setStates","boards","setBoards","selectedDevice","setSelectedDevice","fetch","then","response","json","data","_data$","_id","handleDeviceSelect","event","target","value","checkStateForIndividualSensor","sensorName","sensorValue","deviceName","matchingStates","filter","state","device_name","toLowerCase","sensor_name","result","condition","parameter","name","deviceBoards","board","device_id","sort","a","b","Date","timestamp","recentBoard","find","device","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","map","toLocaleString","sensors","sensor","index","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n// import \"./Query.css\";\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setDevices(data);\r\n        setSelectedDevice(data[0]?._id); // set the selected device to the first device by default\r\n      });\r\n\r\n    fetch(\"/states\")\r\n      .then((response) => response.json())\r\n      .then((data) => setStates(data));\r\n\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => setBoards(data));\r\n  }, []);\r\n\r\n  const handleDeviceSelect = (event) => {\r\n    setSelectedDevice(event.target.value);\r\n  };\r\n\r\n  const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\r\n    const matchingStates = states.filter((state) => {\r\n      return state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase();\r\n    });\r\n\r\n    let result = \"Default\";\r\n\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"=\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const deviceBoards = boards.filter(\r\n    (board) => board.device_id === selectedDevice\r\n  );\r\n  deviceBoards.sort(\r\n    (a, b) => new Date(b.timestamp) - new Date(a.timestamp)\r\n  );\r\n  const recentBoard = deviceBoards[0];\r\n  const deviceName = devices.find((device) => device._id === selectedDevice)?.name;\r\n\r\n  return (\r\n    <div className=\"query\">\r\n      <div className=\"device-select\">\r\n        <label htmlFor=\"device-select\">Select a device:</label>\r\n        <select id=\"device-select\" value={selectedDevice} onChange={handleDeviceSelect}>\r\n          {devices.map((device) => (\r\n            <option key={device._id} value={device._id}>\r\n              {device.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"board-data\">\r\n        <h2>Latest Board Data</h2>\r\n        {recentBoard ? (\r\n          <div>\r\n            <p>Timestamp: {new Date(recentBoard.timestamp).toLocaleString()}</p>\r\n            <p>Device ID: {recentBoard.device_id}</p>\r\n            {recentBoard.sensors.map((sensor, index) => (\r\n              <div key={index}>\r\n                <p>Sensor Name: {sensor.name}</p>\r\n                <p>Sensor Value: {sensor.value}</p>\r\n                <p>Sensor State: {checkStateForIndividualSensor(sensor.name, sensor.value, deviceName)}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p>No board data available for this device.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport  {Query};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}