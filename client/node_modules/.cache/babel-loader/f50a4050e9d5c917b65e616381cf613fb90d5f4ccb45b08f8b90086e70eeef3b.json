{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Query.css\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AverageComponent(_ref) {\n  _s();\n  let {\n    device_id,\n    sensor_name\n  } = _ref;\n  const [timePeriod, setTimePeriod] = useState(\"\");\n  const [average, setAverage] = useState(\"\");\n  const handleInputChange = event => {\n    setTimePeriod(event.target.value);\n  };\n  const handleAverageCalculation = () => {\n    fetch(`/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      setAverage(data.average);\n    }).catch(error => {\n      console.log(\"There was an error!\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter time in seconds\",\n      value: timePeriod,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAverageCalculation,\n      children: \"Calculate Average\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), average && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average: \", average]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(AverageComponent, \"IDLUuxCvaML1njbXD8GYy76eaKg=\");\n_c = AverageComponent;\nfunction Query() {\n  _s2();\n  const [devices, setDevices] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [sensorHistories, setSensorHistories] = useState({});\n  const [states, setStates] = useState([]);\n  const [selectedScenario, setSelectedScenario] = useState(\"ALL\");\n  const [selectedDevice, setSelectedDevice] = useState(\"ALL\");\n  const [selectedState, setSelectedState] = useState(\"ALL\");\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => setDevices(data));\n    fetch(\"/boards\").then(response => response.json()).then(data => setBoards(data));\n    fetch(\"/states\").then(response => response.json()).then(data => setStates(data));\n    const socket = io(\"http://localhost:3001\");\n    socket.on(\"board\", board => {\n      setBoards(boards => [board, ...boards]);\n      let newSensorHistories = {\n        ...sensorHistories\n      };\n      for (let sensor of board.sensors) {\n        let sensorName = sensor.name.toLowerCase();\n        if (!newSensorHistories[sensorName]) {\n          newSensorHistories[sensorName] = [];\n        }\n        newSensorHistories[sensorName].push({\n          value: sensor.value,\n          timestamp: new Date()\n        });\n      }\n      setSensorHistories(newSensorHistories);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const handleScenarioChange = event => {\n    setSelectedScenario(event.target.value);\n    setSelectedDevice(\"ALL\");\n  };\n  const handleDeviceChange = event => {\n    setSelectedDevice(event.target.value);\n  };\n  const handleStateChange = event => {\n    setSelectedState(event.target.value);\n  };\n  const scenarioDevices = devices.filter(device => {\n    if (selectedScenario === \"ALL\") return true;\n    return device.name.startsWith(selectedScenario + \"_\");\n  });\n  const uniqueStates = [...new Set(states.map(state => state.name))];\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\n    const history = sensorHistories[sensorName];\n    if (!history || history.length < 2) {\n      return \"\";\n    }\n    const previousValue = history[history.length - 2].value;\n    return Math.abs(previousValue - sensorValue) < parameter ? \"idle\" : \"\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Query\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedScenario,\n      onChange: handleScenarioChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"ALL\",\n        children: \"ALL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"CAR\",\n        children: \"CAR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"OFFICE\",\n        children: \"OFFICE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"FACTORY\",\n        children: \"FACTORY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), selectedScenario !== \"ALL\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedDevice,\n        onChange: handleDeviceChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ALL\",\n          children: \"ALL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), scenarioDevices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: device.name,\n          children: device.name\n        }, device._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedState,\n        onChange: handleStateChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ALL\",\n          children: \"ALL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), uniqueStates.map((state, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: state,\n          children: state\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), scenarioDevices.filter(device => {\n      if (selectedDevice === \"ALL\") return true;\n      return device.name === selectedDevice;\n    }).map(device => {\n      const deviceBoards = boards.filter(board => board.device_id === device._id);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: device.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }, this), deviceBoards.map(board => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: board.state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 19\n          }, this), board.sensors.map(sensor => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [sensor.name, \": \", sensor.value, \" \", checkIdleState(sensor.name, sensor.value, sensor.parameter) === \"idle\" && \"(idle)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(AverageComponent, {\n              device_id: device._id,\n              sensor_name: sensor.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 23\n            }, this)]\n          }, sensor._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 21\n          }, this))]\n        }, board._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }, this))]\n      }, device._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s2(Query, \"ODls1g7oNZGeGodV2QQglXyR7R4=\");\n_c2 = Query;\nexport default Query;\nvar _c, _c2;\n$RefreshReg$(_c, \"AverageComponent\");\n$RefreshReg$(_c2, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","io","jsxDEV","_jsxDEV","Fragment","_Fragment","AverageComponent","_ref","_s","device_id","sensor_name","timePeriod","setTimePeriod","average","setAverage","handleInputChange","event","target","value","handleAverageCalculation","fetch","then","response","ok","Error","status","json","data","catch","error","console","log","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Query","_s2","devices","setDevices","boards","setBoards","sensorHistories","setSensorHistories","states","setStates","selectedScenario","setSelectedScenario","selectedDevice","setSelectedDevice","selectedState","setSelectedState","socket","on","board","newSensorHistories","sensor","sensors","sensorName","name","toLowerCase","push","timestamp","Date","disconnect","handleScenarioChange","handleDeviceChange","handleStateChange","scenarioDevices","filter","device","startsWith","uniqueStates","Set","map","state","checkIdleState","sensorValue","parameter","history","length","previousValue","Math","abs","className","_id","index","deviceBoards","_c2","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Query.css\";\r\nimport io from \"socket.io-client\";\r\n\r\nfunction AverageComponent({ device_id, sensor_name }) {\r\n  const [timePeriod, setTimePeriod] = useState(\"\");\r\n  const [average, setAverage] = useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    setTimePeriod(event.target.value);\r\n  };\r\n\r\n  const handleAverageCalculation = () => {\r\n    fetch(\r\n      `/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setAverage(data.average);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"There was an error!\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Enter time in seconds\"\r\n        value={timePeriod}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button onClick={handleAverageCalculation}>Calculate Average</button>\r\n      {average && <p>Average: {average}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [sensorHistories, setSensorHistories] = useState({});\r\n  const [states, setStates] = useState([]);\r\n  const [selectedScenario, setSelectedScenario] = useState(\"ALL\");\r\n  const [selectedDevice, setSelectedDevice] = useState(\"ALL\");\r\n  const [selectedState, setSelectedState] = useState(\"ALL\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => setDevices(data));\r\n\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => setBoards(data));\r\n\r\n    fetch(\"/states\")\r\n      .then((response) => response.json())\r\n      .then((data) => setStates(data));\r\n\r\n    const socket = io(\"http://localhost:3001\");\r\n\r\n    socket.on(\"board\", (board) => {\r\n      setBoards((boards) => [board, ...boards]);\r\n\r\n      let newSensorHistories = { ...sensorHistories };\r\n      for (let sensor of board.sensors) {\r\n        let sensorName = sensor.name.toLowerCase();\r\n        if (!newSensorHistories[sensorName]) {\r\n          newSensorHistories[sensorName] = [];\r\n        }\r\n        newSensorHistories[sensorName].push({\r\n          value: sensor.value,\r\n          timestamp: new Date(),\r\n        });\r\n      }\r\n      setSensorHistories(newSensorHistories);\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const handleScenarioChange = (event) => {\r\n    setSelectedScenario(event.target.value);\r\n    setSelectedDevice(\"ALL\");\r\n  };\r\n\r\n  const handleDeviceChange = (event) => {\r\n    setSelectedDevice(event.target.value);\r\n  };\r\n\r\n  const handleStateChange = (event) => {\r\n    setSelectedState(event.target.value);\r\n  };\r\n\r\n  const scenarioDevices = devices.filter((device) => {\r\n    if (selectedScenario === \"ALL\") return true;\r\n    return device.name.startsWith(selectedScenario + \"_\");\r\n  });\r\n\r\n  const uniqueStates = [...new Set(states.map(state => state.name))];\r\n\r\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\r\n    const history = sensorHistories[sensorName];\r\n    if (!history || history.length < 2) {\r\n      return \"\";\r\n    }\r\n    const previousValue = history[history.length - 2].value;\r\n    return Math.abs(previousValue - sensorValue) < parameter ? \"idle\" : \"\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"Query\">\r\n      <select value={selectedScenario} onChange={handleScenarioChange}>\r\n        <option value=\"ALL\">ALL</option>\r\n        <option value=\"CAR\">CAR</option>\r\n        <option value=\"OFFICE\">OFFICE</option>\r\n        <option value=\"FACTORY\">FACTORY</option>\r\n      </select>\r\n\r\n      {selectedScenario !== \"ALL\" && (\r\n        <>\r\n          <select value={selectedDevice} onChange={handleDeviceChange}>\r\n            <option value=\"ALL\">ALL</option>\r\n            {scenarioDevices.map((device) => (\r\n              <option key={device._id} value={device.name}>\r\n                {device.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          <select value={selectedState} onChange={handleStateChange}>\r\n            <option value=\"ALL\">ALL</option>\r\n            {uniqueStates.map((state, index) => (\r\n              <option key={index} value={state}>\r\n                {state}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </>\r\n      )}\r\n\r\n      {scenarioDevices\r\n        .filter((device) => {\r\n          if (selectedDevice === \"ALL\") return true;\r\n          return device.name === selectedDevice;\r\n        })\r\n        .map((device) => {\r\n          const deviceBoards = boards.filter(\r\n            (board) => board.device_id === device._id\r\n          );\r\n          return (\r\n            <div key={device._id}>\r\n              <h2>{device.name}</h2>\r\n              {deviceBoards.map((board) => (\r\n                <div key={board._id}>\r\n                  <h3>{board.state}</h3>\r\n                  {board.sensors.map((sensor) => (\r\n                    <div key={sensor._id}>\r\n                      <p>\r\n                        {sensor.name}: {sensor.value}{\" \"}\r\n                        {checkIdleState(sensor.name, sensor.value, sensor.parameter) === \"idle\" &&\r\n                          \"(idle)\"}\r\n                      </p>\r\n                      <AverageComponent\r\n                        device_id={device._id}\r\n                        sensor_name={sensor.name}\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Query;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}