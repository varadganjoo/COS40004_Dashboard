{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Query.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Query() {\n  _s();\n  var _devices$find;\n  const [devices, setDevices] = useState([]);\n  const [states, setStates] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [sensorHistories, setSensorHistories] = useState({});\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\n  const [selectedState, setSelectedState] = useState({});\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => {\n      var _data$;\n      setDevices(data);\n      setSelectedDevice((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$._id);\n    });\n    fetch(\"/states\").then(response => response.json()).then(data => setStates(data));\n    fetch(\"/boards\").then(response => response.json()).then(data => {\n      setBoards(data);\n      // Save sensor histories\n      let newSensorHistories = {};\n      for (let board of data) {\n        for (let sensor of board.sensors) {\n          let sensorName = sensor.name.toLowerCase();\n          if (!newSensorHistories[sensorName]) {\n            newSensorHistories[sensorName] = [];\n          }\n          newSensorHistories[sensorName].push({\n            value: sensor.value,\n            timestamp: new Date()\n          });\n        }\n      }\n      setSensorHistories(newSensorHistories);\n    });\n  }, []);\n  const handleDeviceSelect = event => {\n    setSelectedDevice(event.target.value);\n  };\n  const handleStateSelect = (device, event) => {\n    setSelectedState({\n      ...selectedState,\n      [device]: event.target.value\n    });\n  };\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\n    const history = sensorHistories[sensorName];\n    if (!history) {\n      return false;\n    }\n    const currentTime = new Date();\n    const relevantHistory = history.filter(entry => (currentTime - entry.timestamp) / 1000 <= parameter);\n    if (relevantHistory.length === 0) {\n      return false;\n    }\n    const min = Math.min(...relevantHistory.map(entry => entry.value));\n    const max = Math.max(...relevantHistory.map(entry => entry.value));\n    return max - min <= sensorValue * 0.01;\n  };\n  const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\n    const matchingStates = states.filter(state => {\n      return state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n    });\n    let result = \"Default\";\n    for (let state of matchingStates) {\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < state.parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > state.parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= state.parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= state.parameter) result = state.name;\n          break;\n        case \"=\":\n          if (sensorValue === state.parameter) result = state.name;\n          break;\n        case \"idle\":\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\n            result = state.name;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n  const deviceBoards = boards.filter(board => board.device_id === selectedDevice);\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  const deviceName = (_devices$find = devices.find(device => device._id === selectedDevice)) === null || _devices$find === void 0 ? void 0 : _devices$find.name;\n  const displaySensors = (sensor, index) => {\n    // Create sensor state mapping\n    const sensorStates = {};\n    for (const state of states) {\n      if (state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensor.name.toLowerCase()) {\n        sensorStates[sensor.name.toLowerCase()] = state.name;\n      }\n    }\n\n    // If a state is selected, only display the sensor for that state\n    if (selectedState[selectedDevice] && selectedState[selectedDevice] !== sensorStates[sensor.name.toLowerCase()]) return null;\n    if ((sensor.name === \"BME\" || sensor.name === \"MPU\") && sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\n      const sensorProperties = sensor.name === \"BME\" ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"] : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\n      return sensor.value.map((val, index) => {\n        const sensorName = `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\n        const state = checkStateForIndividualSensor(sensorName, val, deviceName);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor Name: \", sensorName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor Value: \", val]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor State: \", state]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, `${sensorName}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this);\n      });\n    } else {\n      const sensorName = sensor.name.toLowerCase();\n      const state = checkStateForIndividualSensor(sensorName, sensor.value, deviceName);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sensor Name: \", sensorName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sensor Value: \", sensor.value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sensor State: \", state]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, `${sensor.name}-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  const deviceStates = states.filter(state => state.device_name.toLowerCase() === (deviceName === null || deviceName === void 0 ? void 0 : deviceName.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"query\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"device-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"device-select\",\n        children: \"Select a device:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"device-select\",\n        value: selectedDevice,\n        onChange: handleDeviceSelect,\n        children: devices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: device._id,\n          children: device.name\n        }, device._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"state-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"state-select\",\n        children: \"Select a state:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"state-select\",\n        value: selectedState[selectedDevice] || \"\",\n        onChange: e => handleStateSelect(selectedDevice, e),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), deviceStates.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: state.name,\n          children: state.name\n        }, state._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Device: \", deviceName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sensorList\",\n        children: recentBoard === null || recentBoard === void 0 ? void 0 : recentBoard.sensors.map(displaySensors)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n_s(Query, \"6IwP5kFifo1W6mOjSJ70Pj5ZTIY=\");\n_c = Query;\nexport { Query };\nvar _c;\n$RefreshReg$(_c, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Query","_s","_devices$find","devices","setDevices","states","setStates","boards","setBoards","sensorHistories","setSensorHistories","selectedDevice","setSelectedDevice","selectedState","setSelectedState","fetch","then","response","json","data","_data$","_id","newSensorHistories","board","sensor","sensors","sensorName","name","toLowerCase","push","value","timestamp","Date","handleDeviceSelect","event","target","handleStateSelect","device","checkIdleState","sensorValue","parameter","history","currentTime","relevantHistory","filter","entry","length","min","Math","map","max","checkStateForIndividualSensor","deviceName","matchingStates","state","device_name","sensor_name","result","condition","deviceBoards","device_id","sort","a","b","recentBoard","find","displaySensors","index","sensorStates","type","Array","isArray","sensorProperties","val","children","fileName","_jsxFileName","lineNumber","columnNumber","deviceStates","className","htmlFor","id","onChange","e","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Query.css\";\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [sensorHistories, setSensorHistories] = useState({});\r\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n  const [selectedState, setSelectedState] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setDevices(data);\r\n        setSelectedDevice(data[0]?._id);\r\n      });\r\n\r\n    fetch(\"/states\")\r\n      .then((response) => response.json())\r\n      .then((data) => setStates(data));\r\n\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setBoards(data);\r\n        // Save sensor histories\r\n        let newSensorHistories = {};\r\n        for (let board of data) {\r\n          for (let sensor of board.sensors) {\r\n            let sensorName = sensor.name.toLowerCase();\r\n            if (!newSensorHistories[sensorName]) {\r\n              newSensorHistories[sensorName] = [];\r\n            }\r\n            newSensorHistories[sensorName].push({\r\n              value: sensor.value,\r\n              timestamp: new Date(),\r\n            });\r\n          }\r\n        }\r\n        setSensorHistories(newSensorHistories);\r\n      });\r\n  }, []);\r\n\r\n  const handleDeviceSelect = (event) => {\r\n    setSelectedDevice(event.target.value);\r\n  };\r\n\r\n  const handleStateSelect = (device, event) => {\r\n    setSelectedState({\r\n      ...selectedState,\r\n      [device]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\r\n    const history = sensorHistories[sensorName];\r\n    if (!history) {\r\n      return false;\r\n    }\r\n    const currentTime = new Date();\r\n    const relevantHistory = history.filter(\r\n      (entry) => (currentTime - entry.timestamp) / 1000 <= parameter\r\n    );\r\n    if (relevantHistory.length === 0) {\r\n      return false;\r\n    }\r\n    const min = Math.min(...relevantHistory.map((entry) => entry.value));\r\n    const max = Math.max(...relevantHistory.map((entry) => entry.value));\r\n    return max - min <= sensorValue * 0.01;\r\n  };\r\n\r\n  const checkStateForIndividualSensor = (\r\n    sensorName,\r\n    sensorValue,\r\n    deviceName\r\n  ) => {\r\n    const matchingStates = states.filter((state) => {\r\n      return (\r\n        state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase()\r\n      );\r\n    });\r\n\r\n    let result = \"Default\";\r\n\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"=\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        case \"idle\":\r\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\r\n            result = state.name;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const deviceBoards = boards.filter(\r\n    (board) => board.device_id === selectedDevice\r\n  );\r\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n  const recentBoard = deviceBoards[0];\r\n  const deviceName = devices.find(\r\n    (device) => device._id === selectedDevice\r\n  )?.name;\r\n\r\n  const displaySensors = (sensor, index) => {\r\n    // Create sensor state mapping\r\n    const sensorStates = {};\r\n    for (const state of states) {\r\n      if (\r\n        state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensor.name.toLowerCase()\r\n      ) {\r\n        sensorStates[sensor.name.toLowerCase()] = state.name;\r\n      }\r\n    }\r\n\r\n    // If a state is selected, only display the sensor for that state\r\n    if (\r\n      selectedState[selectedDevice] &&\r\n      selectedState[selectedDevice] !== sensorStates[sensor.name.toLowerCase()]\r\n    )\r\n      return null;\r\n\r\n    if (\r\n      (sensor.name === \"BME\" || sensor.name === \"MPU\") &&\r\n      sensor.type === \"i2c\" &&\r\n      Array.isArray(sensor.value)\r\n    ) {\r\n      const sensorProperties =\r\n        sensor.name === \"BME\"\r\n          ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"]\r\n          : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\r\n      return sensor.value.map((val, index) => {\r\n        const sensorName =\r\n          `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\r\n        const state = checkStateForIndividualSensor(\r\n          sensorName,\r\n          val,\r\n          deviceName\r\n        );\r\n        return (\r\n          <div key={`${sensorName}-${index}`}>\r\n            <p>Sensor Name: {sensorName}</p>\r\n            <p>Sensor Value: {val}</p>\r\n            <p>Sensor State: {state}</p>\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      const sensorName = sensor.name.toLowerCase();\r\n      const state = checkStateForIndividualSensor(\r\n        sensorName,\r\n        sensor.value,\r\n        deviceName\r\n      );\r\n      return (\r\n        <div key={`${sensor.name}-${index}`}>\r\n          <p>Sensor Name: {sensorName}</p>\r\n          <p>Sensor Value: {sensor.value}</p>\r\n          <p>Sensor State: {state}</p>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const deviceStates = states.filter(\r\n    (state) => state.device_name.toLowerCase() === deviceName?.toLowerCase()\r\n  );\r\n\r\n  return (\r\n    <div className=\"query\">\r\n      <div className=\"device-select\">\r\n        <label htmlFor=\"device-select\">Select a device:</label>\r\n        <select\r\n          id=\"device-select\"\r\n          value={selectedDevice}\r\n          onChange={handleDeviceSelect}\r\n        >\r\n          {devices.map((device) => (\r\n            <option key={device._id} value={device._id}>\r\n              {device.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"state-select\">\r\n        <label htmlFor=\"state-select\">Select a state:</label>\r\n        <select\r\n          id=\"state-select\"\r\n          value={selectedState[selectedDevice] || \"\"}\r\n          onChange={(e) => handleStateSelect(selectedDevice, e)}\r\n        >\r\n          <option value=\"\">-- Select --</option>\r\n          {deviceStates.map((state) => (\r\n            <option key={state._id} value={state.name}>\r\n              {state.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"board-data\">\r\n        <h2>Device: {deviceName}</h2>\r\n        <div className=\"sensorList\">\r\n          {recentBoard?.sensors.map(displaySensors)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}