{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Query.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AverageComponent(_ref) {\n  _s();\n  let {\n    device_id,\n    sensor_name\n  } = _ref;\n  const [timePeriod, setTimePeriod] = useState(\"\");\n  const [average, setAverage] = useState(\"\");\n  const handleInputChange = event => {\n    setTimePeriod(event.target.value);\n  };\n  const handleAverageCalculation = () => {\n    fetch(`/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`).then(response => response.json()).then(data => {\n      setAverage(data.average);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter time in seconds\",\n      value: timePeriod,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAverageCalculation,\n      children: \"Calculate Average\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), average && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average: \", average]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(AverageComponent, \"IDLUuxCvaML1njbXD8GYy76eaKg=\");\n_c = AverageComponent;\nfunction Query() {\n  _s2();\n  var _devices$find;\n  const [devices, setDevices] = useState([]);\n  const [states, setStates] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [sensorHistories, setSensorHistories] = useState({});\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\n  const [selectedState, setSelectedState] = useState({});\n  const [averageCalculationSensor, setAverageCalculationSensor] = useState(null);\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => {\n      var _data$;\n      setDevices(data);\n      setSelectedDevice((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$._id);\n    });\n    fetch(\"/states\").then(response => response.json()).then(data => setStates(data));\n    fetch(\"/boards\").then(response => response.json()).then(data => {\n      setBoards(data);\n      let newSensorHistories = {};\n      for (let board of data) {\n        for (let sensor of board.sensors) {\n          let sensorName = sensor.name.toLowerCase();\n          if (!newSensorHistories[sensorName]) {\n            newSensorHistories[sensorName] = [];\n          }\n          newSensorHistories[sensorName].push({\n            value: sensor.value,\n            timestamp: new Date()\n          });\n        }\n      }\n      setSensorHistories(newSensorHistories);\n    });\n  }, []);\n  const handleDeviceSelect = event => {\n    setSelectedDevice(event.target.value);\n  };\n  const handleStateSelect = (device, event) => {\n    setSelectedState({\n      ...selectedState,\n      [device]: event.target.value\n    });\n  };\n  const handleAverageCalculationClick = sensor_name => {\n    setAverageCalculationSensor(sensor_name);\n  };\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\n    const history = sensorHistories[sensorName];\n    if (!history) {\n      return false;\n    }\n    const currentTime = new Date();\n    const relevantHistory = history.filter(entry => (currentTime - entry.timestamp) / 1000 <= parameter);\n    if (relevantHistory.length === 0) {\n      return false;\n    }\n    const min = Math.min(...relevantHistory.map(entry => entry.value));\n    const max = Math.max(...relevantHistory.map(entry => entry.value));\n    return max - min <= sensorValue * 0.01;\n  };\n  const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\n    const matchingStates = states.filter(state => {\n      return state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n    });\n    let result = \"Default\";\n    for (let state of matchingStates) {\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < state.parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > state.parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= state.parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= state.parameter) result = state.name;\n          break;\n        case \"=\":\n          if (sensorValue === state.parameter) result = state.name;\n          break;\n        case \"idle\":\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\n            result = state.name;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n  const deviceBoards = boards.filter(board => board.device_id === selectedDevice);\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  const deviceName = (_devices$find = devices.find(device => device._id === selectedDevice)) === null || _devices$find === void 0 ? void 0 : _devices$find.name;\n  const displaySensors = (sensor, index) => {\n    const sensorStates = {};\n    for (const state of states) {\n      if (state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensor.name.toLowerCase()) {\n        sensorStates[sensor.name.toLowerCase()] = state.name;\n      }\n    }\n    if (selectedState[selectedDevice] && selectedState[selectedDevice] !== sensorStates[sensor.name.toLowerCase()]) return null;\n    if ((sensor.name === \"BME\" || sensor.name === \"MPU\") && sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\n      const sensorProperties = sensor.name === \"BME\" ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"] : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\n      return sensor.value.map((val, index) => {\n        const sensorName = `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\n        const state = checkStateForIndividualSensor(sensorName, val, deviceName);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor Name: \", sensorName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor Value: \", val]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor State: \", state]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAverageCalculationClick(sensorName),\n            children: \"Find Average\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), averageCalculationSensor === sensorName && /*#__PURE__*/_jsxDEV(AverageComponent, {\n            device_id: selectedDevice,\n            sensor_name: sensorName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this)]\n        }, `${sensorName}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this);\n      });\n    } else {\n      const sensorName = sensor.name.toLowerCase();\n      const state = checkStateForIndividualSensor(sensorName, sensor.value, deviceName);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sensor Name: \", sensorName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sensor Value: \", sensor.value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sensor State: \", state]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAverageCalculationClick(sensorName),\n          children: \"Find Average\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), averageCalculationSensor === sensorName && /*#__PURE__*/_jsxDEV(AverageComponent, {\n          device_id: selectedDevice,\n          sensor_name: sensorName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this)]\n      }, `${sensor.name}-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Query\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleDeviceSelect,\n      children: devices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: device._id,\n        children: device.name\n      }, device._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: event => handleStateSelect(selectedDevice, event),\n      value: selectedState[selectedDevice],\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), states.filter(state => state.device_name === deviceName).map((state, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: state.name,\n        children: state.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), recentBoard && recentBoard.sensors.map(displaySensors)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n}\n_s2(Query, \"hvD3YKnW0nKlzMIlEHTKjofTzY0=\");\n_c2 = Query;\nexport { Query };\nvar _c, _c2;\n$RefreshReg$(_c, \"AverageComponent\");\n$RefreshReg$(_c2, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AverageComponent","_ref","_s","device_id","sensor_name","timePeriod","setTimePeriod","average","setAverage","handleInputChange","event","target","value","handleAverageCalculation","fetch","then","response","json","data","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Query","_s2","_devices$find","devices","setDevices","states","setStates","boards","setBoards","sensorHistories","setSensorHistories","selectedDevice","setSelectedDevice","selectedState","setSelectedState","averageCalculationSensor","setAverageCalculationSensor","_data$","_id","newSensorHistories","board","sensor","sensors","sensorName","name","toLowerCase","push","timestamp","Date","handleDeviceSelect","handleStateSelect","device","handleAverageCalculationClick","checkIdleState","sensorValue","parameter","history","currentTime","relevantHistory","filter","entry","length","min","Math","map","max","checkStateForIndividualSensor","deviceName","matchingStates","state","device_name","result","condition","deviceBoards","sort","a","b","recentBoard","find","displaySensors","index","sensorStates","Array","isArray","sensorProperties","val","className","_c2","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Query.css\";\r\n\r\nfunction AverageComponent({ device_id, sensor_name }) {\r\n  const [timePeriod, setTimePeriod] = useState(\"\");\r\n  const [average, setAverage] = useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    setTimePeriod(event.target.value);\r\n  };\r\n\r\n  const handleAverageCalculation = () => {\r\n    fetch(`/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setAverage(data.average);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Enter time in seconds\"\r\n        value={timePeriod}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button onClick={handleAverageCalculation}>Calculate Average</button>\r\n      {average && <p>Average: {average}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [sensorHistories, setSensorHistories] = useState({});\r\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n  const [selectedState, setSelectedState] = useState({});\r\n  const [averageCalculationSensor, setAverageCalculationSensor] =\r\n    useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setDevices(data);\r\n        setSelectedDevice(data[0]?._id);\r\n      });\r\n\r\n    fetch(\"/states\")\r\n      .then((response) => response.json())\r\n      .then((data) => setStates(data));\r\n\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setBoards(data);\r\n        let newSensorHistories = {};\r\n        for (let board of data) {\r\n          for (let sensor of board.sensors) {\r\n            let sensorName = sensor.name.toLowerCase();\r\n            if (!newSensorHistories[sensorName]) {\r\n              newSensorHistories[sensorName] = [];\r\n            }\r\n            newSensorHistories[sensorName].push({\r\n              value: sensor.value,\r\n              timestamp: new Date(),\r\n            });\r\n          }\r\n        }\r\n        setSensorHistories(newSensorHistories);\r\n      });\r\n  }, []);\r\n\r\n  const handleDeviceSelect = (event) => {\r\n    setSelectedDevice(event.target.value);\r\n  };\r\n\r\n  const handleStateSelect = (device, event) => {\r\n    setSelectedState({\r\n      ...selectedState,\r\n      [device]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleAverageCalculationClick = (sensor_name) => {\r\n    setAverageCalculationSensor(sensor_name);\r\n  };\r\n\r\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\r\n    const history = sensorHistories[sensorName];\r\n    if (!history) {\r\n      return false;\r\n    }\r\n    const currentTime = new Date();\r\n    const relevantHistory = history.filter(\r\n      (entry) => (currentTime - entry.timestamp) / 1000 <= parameter\r\n    );\r\n    if (relevantHistory.length === 0) {\r\n      return false;\r\n    }\r\n    const min = Math.min(...relevantHistory.map((entry) => entry.value));\r\n    const max = Math.max(...relevantHistory.map((entry) => entry.value));\r\n    return max - min <= sensorValue * 0.01;\r\n  };\r\n\r\n  const checkStateForIndividualSensor = (\r\n    sensorName,\r\n    sensorValue,\r\n    deviceName\r\n  ) => {\r\n    const matchingStates = states.filter((state) => {\r\n      return (\r\n        state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase()\r\n      );\r\n    });\r\n\r\n    let result = \"Default\";\r\n\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"=\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        case \"idle\":\r\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\r\n            result = state.name;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const deviceBoards = boards.filter(\r\n    (board) => board.device_id === selectedDevice\r\n  );\r\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n  const recentBoard = deviceBoards[0];\r\n  const deviceName = devices.find(\r\n    (device) => device._id === selectedDevice\r\n  )?.name;\r\n\r\n  const displaySensors = (sensor, index) => {\r\n    const sensorStates = {};\r\n    for (const state of states) {\r\n      if (\r\n        state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensor.name.toLowerCase()\r\n      ) {\r\n        sensorStates[sensor.name.toLowerCase()] = state.name;\r\n      }\r\n    }\r\n\r\n    if (\r\n      selectedState[selectedDevice] &&\r\n      selectedState[selectedDevice] !== sensorStates[sensor.name.toLowerCase()]\r\n    )\r\n      return null;\r\n\r\n    if (\r\n      (sensor.name === \"BME\" || sensor.name === \"MPU\") &&\r\n      sensor.type === \"i2c\" &&\r\n      Array.isArray(sensor.value)\r\n    ) {\r\n      const sensorProperties =\r\n        sensor.name === \"BME\"\r\n          ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"]\r\n          : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\r\n      return sensor.value.map((val, index) => {\r\n        const sensorName =\r\n          `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\r\n        const state = checkStateForIndividualSensor(\r\n          sensorName,\r\n          val,\r\n          deviceName\r\n        );\r\n        return (\r\n          <div key={`${sensorName}-${index}`}>\r\n            <p>Sensor Name: {sensorName}</p>\r\n            <p>Sensor Value: {val}</p>\r\n            <p>Sensor State: {state}</p>\r\n            <button onClick={() => handleAverageCalculationClick(sensorName)}>\r\n              Find Average\r\n            </button>\r\n            {averageCalculationSensor === sensorName && (\r\n              <AverageComponent\r\n                device_id={selectedDevice}\r\n                sensor_name={sensorName}\r\n              />\r\n            )}\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      const sensorName = sensor.name.toLowerCase();\r\n      const state = checkStateForIndividualSensor(\r\n        sensorName,\r\n        sensor.value,\r\n        deviceName\r\n      );\r\n      return (\r\n        <div key={`${sensor.name}-${index}`}>\r\n          <p>Sensor Name: {sensorName}</p>\r\n          <p>Sensor Value: {sensor.value}</p>\r\n          <p>Sensor State: {state}</p>\r\n          <button onClick={() => handleAverageCalculationClick(sensorName)}>\r\n            Find Average\r\n          </button>\r\n          {averageCalculationSensor === sensorName && (\r\n            <AverageComponent\r\n              device_id={selectedDevice}\r\n              sensor_name={sensorName}\r\n            />\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Query\">\r\n      <select onChange={handleDeviceSelect}>\r\n        {devices.map((device) => (\r\n          <option key={device._id} value={device._id}>\r\n            {device.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <select\r\n        onChange={(event) => handleStateSelect(selectedDevice, event)}\r\n        value={selectedState[selectedDevice]}\r\n      >\r\n        <option value=\"\">All</option>\r\n        {states\r\n          .filter((state) => state.device_name === deviceName)\r\n          .map((state, index) => (\r\n            <option key={index} value={state.name}>\r\n              {state.name}\r\n            </option>\r\n          ))}\r\n      </select>\r\n      {recentBoard && recentBoard.sensors.map(displaySensors)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}