{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Query.css\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AverageComponent(_ref) {\n  _s();\n  let {\n    device_id,\n    sensor_name\n  } = _ref;\n  const [timePeriod, setTimePeriod] = useState(\"\");\n  const [average, setAverage] = useState(\"\");\n  const handleInputChange = event => {\n    setTimePeriod(event.target.value);\n  };\n  const handleAverageCalculation = () => {\n    fetch(`/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`).then(response => {\n      console.log(response);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      setAverage(data.average);\n    }).catch(error => {\n      console.log(\"There was an error!\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter time in seconds\",\n      value: timePeriod,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAverageCalculation,\n      children: \"Calculate Average\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), average && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average: \", average]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(AverageComponent, \"IDLUuxCvaML1njbXD8GYy76eaKg=\");\n_c = AverageComponent;\nfunction Query() {\n  _s2();\n  const [devices, setDevices] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [sensorHistories, setSensorHistories] = useState({});\n  const [states, setStates] = useState([]);\n  const [selectedScenario, setSelectedScenario] = useState(\"ALL\");\n  const [selectedDevice, setSelectedDevice] = useState(\"ALL\");\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => setDevices(data));\n    fetch(\"/boards\").then(response => response.json()).then(data => setBoards(data));\n    fetch(\"/states\").then(response => response.json()).then(data => setStates(data));\n\n    // Establish a WebSocket connection with the server\n    const socket = io(\"http://localhost:3001\");\n\n    // When a new board data is received, update the state\n    socket.on(\"board\", board => {\n      setBoards(boards => [board, ...boards]);\n\n      // Save sensor histories\n      let newSensorHistories = {\n        ...sensorHistories\n      };\n      for (let sensor of board.sensors) {\n        let sensorName = sensor.name.toLowerCase();\n        if (!newSensorHistories[sensorName]) {\n          newSensorHistories[sensorName] = [];\n        }\n        newSensorHistories[sensorName].push({\n          value: sensor.value,\n          timestamp: new Date()\n        });\n      }\n      setSensorHistories(newSensorHistories);\n    });\n\n    // Disconnect the socket when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const handleScenarioChange = event => {\n    setSelectedScenario(event.target.value);\n    setSelectedDevice(\"ALL\"); // reset the device selection when scenario changes\n  };\n\n  const handleDeviceChange = event => {\n    setSelectedDevice(event.target.value);\n  };\n  const scenarioDevices = devices.filter(device => {\n    if (selectedScenario === \"ALL\") return true;\n    return device.name.startsWith(selectedScenario + \"_\");\n  });\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\n    const history = sensorHistories[sensorName];\n    if (!history || history.length < 2) {\n      return false;\n    }\n    let isIdle = true;\n    let previousValue = history[0].value;\n    let previousTimestamp = history[0].timestamp;\n    for (let i = 1; i < history.length; i++) {\n      let currentValue = history[i].value;\n      let currentTimestamp = history[i].timestamp;\n      let percentageChange = Math.abs(currentValue - previousValue) / previousValue * 100;\n      if (percentageChange > 1 || currentTimestamp - previousTimestamp > parameter * 1000) {\n        isIdle = false;\n        break;\n      }\n      previousValue = currentValue;\n      previousTimestamp = currentTimestamp;\n    }\n    return isIdle;\n  };\n  const checkStateForIndividualSensor = (deviceName, sensorName, sensorValue) => {\n    const matchingStates = states.filter(state => {\n      return state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n    });\n    let result = \"Default\";\n    for (let state of matchingStates) {\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < state.parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > state.parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= state.parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= state.parameter) result = state.name;\n          break;\n        case \"=\":\n          if (sensorValue === state.parameter) result = state.name;\n          break;\n        case \"idle\":\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\n            result = state.name;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n  const displaySensors = (sensor, index, board) => {\n    const deviceName = board.device_id;\n    if ((sensor.name === \"BME\" || sensor.name === \"MPU\") && sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\n      const sensorProperties = sensor.name === \"BME\" ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"] : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\n      return sensor.value.map((val, index) => {\n        const sensorName = `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\n        const state = checkStateForIndividualSensor(deviceName, sensorName, val);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: sensorName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: val\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this)]\n        }, `${sensor.name}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this);\n      });\n    } else {\n      const state = checkStateForIndividualSensor(deviceName, sensor.name, sensor.value);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: sensor.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: sensor.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Query\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedScenario,\n      onChange: handleScenarioChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"ALL\",\n        children: \"ALL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"CAR\",\n        children: \"CAR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"OFFICE\",\n        children: \"OFFICE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"FACTORY\",\n        children: \"FACTORY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), selectedScenario !== \"ALL\" && /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedDevice,\n      onChange: handleDeviceChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"ALL\",\n        children: \"ALL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this), scenarioDevices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: device.name,\n        children: device.name\n      }, device._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this), scenarioDevices.filter(device => {\n      if (selectedDevice === \"ALL\") return true;\n      return device.name === selectedDevice;\n    }).map(device => {\n      const deviceBoards = boards.filter(board => board.device_id === device._id);\n      deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n      const recentBoard = deviceBoards[0];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: device.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 15\n        }, this), recentBoard && recentBoard.sensors.map((sensor, index) => displaySensors(sensor, index, recentBoard))]\n      }, device._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n_s2(Query, \"Y3rpu9bpZ1lg0fLdY9R6pHyiTMU=\");\n_c2 = Query;\nexport { Query };\nvar _c, _c2;\n$RefreshReg$(_c, \"AverageComponent\");\n$RefreshReg$(_c2, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","io","jsxDEV","_jsxDEV","AverageComponent","_ref","_s","device_id","sensor_name","timePeriod","setTimePeriod","average","setAverage","handleInputChange","event","target","value","handleAverageCalculation","fetch","then","response","console","log","ok","Error","status","json","data","catch","error","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Query","_s2","devices","setDevices","boards","setBoards","sensorHistories","setSensorHistories","states","setStates","selectedScenario","setSelectedScenario","selectedDevice","setSelectedDevice","socket","on","board","newSensorHistories","sensor","sensors","sensorName","name","toLowerCase","push","timestamp","Date","disconnect","handleScenarioChange","handleDeviceChange","scenarioDevices","filter","device","startsWith","checkIdleState","sensorValue","parameter","history","length","isIdle","previousValue","previousTimestamp","i","currentValue","currentTimestamp","percentageChange","Math","abs","checkStateForIndividualSensor","deviceName","matchingStates","state","device_name","result","condition","displaySensors","index","Array","isArray","sensorProperties","map","val","className","_id","deviceBoards","sort","a","b","recentBoard","_c2","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Query.css\";\r\nimport io from \"socket.io-client\";\r\n\r\nfunction AverageComponent({ device_id, sensor_name }) {\r\n  const [timePeriod, setTimePeriod] = useState(\"\");\r\n  const [average, setAverage] = useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    setTimePeriod(event.target.value);\r\n  };\r\n\r\n  const handleAverageCalculation = () => {\r\n    fetch(\r\n      `/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`\r\n    )\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setAverage(data.average);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"There was an error!\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Enter time in seconds\"\r\n        value={timePeriod}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button onClick={handleAverageCalculation}>Calculate Average</button>\r\n      {average && <p>Average: {average}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [sensorHistories, setSensorHistories] = useState({});\r\n  const [states, setStates] = useState([]);\r\n  const [selectedScenario, setSelectedScenario] = useState(\"ALL\");\r\n  const [selectedDevice, setSelectedDevice] = useState(\"ALL\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => setDevices(data));\r\n\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => setBoards(data));\r\n\r\n    fetch(\"/states\")\r\n      .then((response) => response.json())\r\n      .then((data) => setStates(data));\r\n\r\n    // Establish a WebSocket connection with the server\r\n    const socket = io(\"http://localhost:3001\");\r\n\r\n    // When a new board data is received, update the state\r\n    socket.on(\"board\", (board) => {\r\n      setBoards((boards) => [board, ...boards]);\r\n\r\n      // Save sensor histories\r\n      let newSensorHistories = { ...sensorHistories };\r\n      for (let sensor of board.sensors) {\r\n        let sensorName = sensor.name.toLowerCase();\r\n        if (!newSensorHistories[sensorName]) {\r\n          newSensorHistories[sensorName] = [];\r\n        }\r\n        newSensorHistories[sensorName].push({\r\n          value: sensor.value,\r\n          timestamp: new Date(),\r\n        });\r\n      }\r\n      setSensorHistories(newSensorHistories);\r\n    });\r\n\r\n    // Disconnect the socket when the component unmounts\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const handleScenarioChange = (event) => {\r\n    setSelectedScenario(event.target.value);\r\n    setSelectedDevice(\"ALL\"); // reset the device selection when scenario changes\r\n  };\r\n\r\n  const handleDeviceChange = (event) => {\r\n    setSelectedDevice(event.target.value);\r\n  };\r\n\r\n  const scenarioDevices = devices.filter((device) => {\r\n    if (selectedScenario === \"ALL\") return true;\r\n    return device.name.startsWith(selectedScenario + \"_\");\r\n  });\r\n\r\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\r\n    const history = sensorHistories[sensorName];\r\n    if (!history || history.length < 2) {\r\n      return false;\r\n    }\r\n\r\n    let isIdle = true;\r\n    let previousValue = history[0].value;\r\n    let previousTimestamp = history[0].timestamp;\r\n\r\n    for (let i = 1; i < history.length; i++) {\r\n      let currentValue = history[i].value;\r\n      let currentTimestamp = history[i].timestamp;\r\n      let percentageChange =\r\n        (Math.abs(currentValue - previousValue) / previousValue) * 100;\r\n\r\n      if (\r\n        percentageChange > 1 ||\r\n        currentTimestamp - previousTimestamp > parameter * 1000\r\n      ) {\r\n        isIdle = false;\r\n        break;\r\n      }\r\n\r\n      previousValue = currentValue;\r\n      previousTimestamp = currentTimestamp;\r\n    }\r\n\r\n    return isIdle;\r\n  };\r\n\r\n  const checkStateForIndividualSensor = (deviceName, sensorName, sensorValue) => {\r\n    const matchingStates = states.filter((state) => {\r\n      return (\r\n        state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase()\r\n      );\r\n    });\r\n\r\n    let result = \"Default\";\r\n\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"=\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        case \"idle\":\r\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\r\n            result = state.name;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const displaySensors = (sensor, index, board) => {\r\n    const deviceName = board.device_id;\r\n    if (\r\n      (sensor.name === \"BME\" || sensor.name === \"MPU\") &&\r\n      sensor.type === \"i2c\" &&\r\n      Array.isArray(sensor.value)\r\n    ) {\r\n      const sensorProperties =\r\n        sensor.name === \"BME\"\r\n          ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"]\r\n          : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\r\n      return sensor.value.map((val, index) => {\r\n        const sensorName =\r\n          `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\r\n        const state = checkStateForIndividualSensor(deviceName, sensorName, val);\r\n        return (\r\n          <div key={`${sensor.name}-${index}`}>\r\n            <span>{sensorName}</span>\r\n            <span>{val}</span>\r\n            <span>{state}</span>\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      const state = checkStateForIndividualSensor(deviceName, sensor.name, sensor.value);\r\n      return (\r\n        <div key={index}>\r\n          <span>{sensor.name}</span>\r\n          <span>{sensor.value}</span>\r\n          <span>{state}</span>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Query\">\r\n      <select value={selectedScenario} onChange={handleScenarioChange}>\r\n        <option value=\"ALL\">ALL</option>\r\n        <option value=\"CAR\">CAR</option>\r\n        <option value=\"OFFICE\">OFFICE</option>\r\n        <option value=\"FACTORY\">FACTORY</option>\r\n      </select>\r\n\r\n      {selectedScenario !== \"ALL\" && (\r\n        <select value={selectedDevice} onChange={handleDeviceChange}>\r\n          <option value=\"ALL\">ALL</option>\r\n          {scenarioDevices.map((device) => (\r\n            <option key={device._id} value={device.name}>\r\n              {device.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      )}\r\n\r\n      {scenarioDevices\r\n        .filter((device) => {\r\n          if (selectedDevice === \"ALL\") return true;\r\n          return device.name === selectedDevice;\r\n        })\r\n        .map((device) => {\r\n          const deviceBoards = boards.filter(\r\n            (board) => board.device_id === device._id\r\n          );\r\n          deviceBoards.sort(\r\n            (a, b) => new Date(b.timestamp) - new Date(a.timestamp)\r\n          );\r\n          const recentBoard = deviceBoards[0];\r\n\r\n          return (\r\n            <div key={device._id}>\r\n              <h2>{device.name}</h2>\r\n              {recentBoard &&\r\n                recentBoard.sensors.map((sensor, index) =>\r\n                  displaySensors(sensor, index, recentBoard)\r\n                )}\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,aAAa;AACpB,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,gBAAgBA,CAAAC,IAAA,EAA6B;EAAAC,EAAA;EAAA,IAA5B;IAAEC,SAAS;IAAEC;EAAY,CAAC,GAAAH,IAAA;EAClD,MAAM,CAACI,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMa,iBAAiB,GAAIC,KAAK,IAAK;IACnCJ,aAAa,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;IACrCC,KAAK,CACF,kBAAiBX,SAAU,WAAUC,WAAY,eAAcC,UAAW,EAC7E,CAAC,CACEU,IAAI,CAAEC,QAAQ,IAAK;MAClBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrB,IAAI,CAACA,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBJ,QAAQ,CAACK,MAAO,EAAC,CAAC;MAC3D;MACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDP,IAAI,CAAEQ,IAAI,IAAK;MACdf,UAAU,CAACe,IAAI,CAAChB,OAAO,CAAC;IAC1B,CAAC,CAAC,CACDiB,KAAK,CAAEC,KAAK,IAAK;MAChBR,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEO,KAAK,CAAC;IAC3C,CAAC,CAAC;EACN,CAAC;EAED,oBACE1B,OAAA;IAAA2B,QAAA,gBACE3B,OAAA;MACE4B,IAAI,EAAC,QAAQ;MACbC,WAAW,EAAC,uBAAuB;MACnChB,KAAK,EAAEP,UAAW;MAClBwB,QAAQ,EAAEpB;IAAkB;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACFlC,OAAA;MAAQmC,OAAO,EAAErB,wBAAyB;MAAAa,QAAA,EAAC;IAAiB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACpE1B,OAAO,iBAAIR,OAAA;MAAA2B,QAAA,GAAG,WAAS,EAACnB,OAAO;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEV;AAAC/B,EAAA,CAvCQF,gBAAgB;AAAAmC,EAAA,GAAhBnC,gBAAgB;AAyCzB,SAASoC,KAAKA,CAAA,EAAG;EAAAC,GAAA;EACf,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC4C,MAAM,EAAEC,SAAS,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAC8C,eAAe,EAAEC,kBAAkB,CAAC,GAAG/C,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACgD,MAAM,EAAEC,SAAS,CAAC,GAAGjD,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACkD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnD,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACoD,cAAc,EAAEC,iBAAiB,CAAC,GAAGrD,QAAQ,CAAC,KAAK,CAAC;EAE3DD,SAAS,CAAC,MAAM;IACdmB,KAAK,CAAC,UAAU,CAAC,CACdC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CACnCP,IAAI,CAAEQ,IAAI,IAAKgB,UAAU,CAAChB,IAAI,CAAC,CAAC;IAEnCT,KAAK,CAAC,SAAS,CAAC,CACbC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CACnCP,IAAI,CAAEQ,IAAI,IAAKkB,SAAS,CAAClB,IAAI,CAAC,CAAC;IAElCT,KAAK,CAAC,SAAS,CAAC,CACbC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CACnCP,IAAI,CAAEQ,IAAI,IAAKsB,SAAS,CAACtB,IAAI,CAAC,CAAC;;IAElC;IACA,MAAM2B,MAAM,GAAGrD,EAAE,CAAC,uBAAuB,CAAC;;IAE1C;IACAqD,MAAM,CAACC,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;MAC5BX,SAAS,CAAED,MAAM,IAAK,CAACY,KAAK,EAAE,GAAGZ,MAAM,CAAC,CAAC;;MAEzC;MACA,IAAIa,kBAAkB,GAAG;QAAE,GAAGX;MAAgB,CAAC;MAC/C,KAAK,IAAIY,MAAM,IAAIF,KAAK,CAACG,OAAO,EAAE;QAChC,IAAIC,UAAU,GAAGF,MAAM,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC;QAC1C,IAAI,CAACL,kBAAkB,CAACG,UAAU,CAAC,EAAE;UACnCH,kBAAkB,CAACG,UAAU,CAAC,GAAG,EAAE;QACrC;QACAH,kBAAkB,CAACG,UAAU,CAAC,CAACG,IAAI,CAAC;UAClC/C,KAAK,EAAE0C,MAAM,CAAC1C,KAAK;UACnBgD,SAAS,EAAE,IAAIC,IAAI,CAAC;QACtB,CAAC,CAAC;MACJ;MACAlB,kBAAkB,CAACU,kBAAkB,CAAC;IACxC,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXH,MAAM,CAACY,UAAU,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,oBAAoB,GAAIrD,KAAK,IAAK;IACtCqC,mBAAmB,CAACrC,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACvCqC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;EAC5B,CAAC;;EAED,MAAMe,kBAAkB,GAAItD,KAAK,IAAK;IACpCuC,iBAAiB,CAACvC,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvC,CAAC;EAED,MAAMqD,eAAe,GAAG3B,OAAO,CAAC4B,MAAM,CAAEC,MAAM,IAAK;IACjD,IAAIrB,gBAAgB,KAAK,KAAK,EAAE,OAAO,IAAI;IAC3C,OAAOqB,MAAM,CAACV,IAAI,CAACW,UAAU,CAACtB,gBAAgB,GAAG,GAAG,CAAC;EACvD,CAAC,CAAC;EAEF,MAAMuB,cAAc,GAAGA,CAACb,UAAU,EAAEc,WAAW,EAAEC,SAAS,KAAK;IAC7D,MAAMC,OAAO,GAAG9B,eAAe,CAACc,UAAU,CAAC;IAC3C,IAAI,CAACgB,OAAO,IAAIA,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAClC,OAAO,KAAK;IACd;IAEA,IAAIC,MAAM,GAAG,IAAI;IACjB,IAAIC,aAAa,GAAGH,OAAO,CAAC,CAAC,CAAC,CAAC5D,KAAK;IACpC,IAAIgE,iBAAiB,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAACZ,SAAS;IAE5C,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,CAACC,MAAM,EAAEI,CAAC,EAAE,EAAE;MACvC,IAAIC,YAAY,GAAGN,OAAO,CAACK,CAAC,CAAC,CAACjE,KAAK;MACnC,IAAImE,gBAAgB,GAAGP,OAAO,CAACK,CAAC,CAAC,CAACjB,SAAS;MAC3C,IAAIoB,gBAAgB,GACjBC,IAAI,CAACC,GAAG,CAACJ,YAAY,GAAGH,aAAa,CAAC,GAAGA,aAAa,GAAI,GAAG;MAEhE,IACEK,gBAAgB,GAAG,CAAC,IACpBD,gBAAgB,GAAGH,iBAAiB,GAAGL,SAAS,GAAG,IAAI,EACvD;QACAG,MAAM,GAAG,KAAK;QACd;MACF;MAEAC,aAAa,GAAGG,YAAY;MAC5BF,iBAAiB,GAAGG,gBAAgB;IACtC;IAEA,OAAOL,MAAM;EACf,CAAC;EAED,MAAMS,6BAA6B,GAAGA,CAACC,UAAU,EAAE5B,UAAU,EAAEc,WAAW,KAAK;IAC7E,MAAMe,cAAc,GAAGzC,MAAM,CAACsB,MAAM,CAAEoB,KAAK,IAAK;MAC9C,OACEA,KAAK,CAACC,WAAW,CAAC7B,WAAW,CAAC,CAAC,KAAK0B,UAAU,CAAC1B,WAAW,CAAC,CAAC,IAC5D4B,KAAK,CAAClF,WAAW,CAACsD,WAAW,CAAC,CAAC,KAAKF,UAAU,CAACE,WAAW,CAAC,CAAC;IAEhE,CAAC,CAAC;IAEF,IAAI8B,MAAM,GAAG,SAAS;IAEtB,KAAK,IAAIF,KAAK,IAAID,cAAc,EAAE;MAChC,QAAQC,KAAK,CAACG,SAAS;QACrB,KAAK,GAAG;UACN,IAAInB,WAAW,GAAGgB,KAAK,CAACf,SAAS,EAAEiB,MAAM,GAAGF,KAAK,CAAC7B,IAAI;UACtD;QACF,KAAK,GAAG;UACN,IAAIa,WAAW,GAAGgB,KAAK,CAACf,SAAS,EAAEiB,MAAM,GAAGF,KAAK,CAAC7B,IAAI;UACtD;QACF,KAAK,IAAI;UACP,IAAIa,WAAW,IAAIgB,KAAK,CAACf,SAAS,EAAEiB,MAAM,GAAGF,KAAK,CAAC7B,IAAI;UACvD;QACF,KAAK,IAAI;UACP,IAAIa,WAAW,IAAIgB,KAAK,CAACf,SAAS,EAAEiB,MAAM,GAAGF,KAAK,CAAC7B,IAAI;UACvD;QACF,KAAK,GAAG;UACN,IAAIa,WAAW,KAAKgB,KAAK,CAACf,SAAS,EAAEiB,MAAM,GAAGF,KAAK,CAAC7B,IAAI;UACxD;QACF,KAAK,MAAM;UACT,IAAIY,cAAc,CAACb,UAAU,EAAEc,WAAW,EAAEgB,KAAK,CAACf,SAAS,CAAC,EAAE;YAC5DiB,MAAM,GAAGF,KAAK,CAAC7B,IAAI;UACrB;UACA;QACF;UACE;MACJ;IACF;IAEA,OAAO+B,MAAM;EACf,CAAC;EAED,MAAME,cAAc,GAAGA,CAACpC,MAAM,EAAEqC,KAAK,EAAEvC,KAAK,KAAK;IAC/C,MAAMgC,UAAU,GAAGhC,KAAK,CAACjD,SAAS;IAClC,IACE,CAACmD,MAAM,CAACG,IAAI,KAAK,KAAK,IAAIH,MAAM,CAACG,IAAI,KAAK,KAAK,KAC/CH,MAAM,CAAC3B,IAAI,KAAK,KAAK,IACrBiE,KAAK,CAACC,OAAO,CAACvC,MAAM,CAAC1C,KAAK,CAAC,EAC3B;MACA,MAAMkF,gBAAgB,GACpBxC,MAAM,CAACG,IAAI,KAAK,KAAK,GACjB,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,CAAC,GAC9C,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;MAC/D,OAAOH,MAAM,CAAC1C,KAAK,CAACmF,GAAG,CAAC,CAACC,GAAG,EAAEL,KAAK,KAAK;QACtC,MAAMnC,UAAU,GACb,GAAEF,MAAM,CAACG,IAAK,IAAGqC,gBAAgB,CAACH,KAAK,CAAE,EAAC,CAACjC,WAAW,CAAC,CAAC;QAC3D,MAAM4B,KAAK,GAAGH,6BAA6B,CAACC,UAAU,EAAE5B,UAAU,EAAEwC,GAAG,CAAC;QACxE,oBACEjG,OAAA;UAAA2B,QAAA,gBACE3B,OAAA;YAAA2B,QAAA,EAAO8B;UAAU;YAAA1B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACzBlC,OAAA;YAAA2B,QAAA,EAAOsE;UAAG;YAAAlE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAClBlC,OAAA;YAAA2B,QAAA,EAAO4D;UAAK;YAAAxD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA,GAHX,GAAEqB,MAAM,CAACG,IAAK,IAAGkC,KAAM,EAAC;UAAA7D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAI9B,CAAC;MAEV,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,MAAMqD,KAAK,GAAGH,6BAA6B,CAACC,UAAU,EAAE9B,MAAM,CAACG,IAAI,EAAEH,MAAM,CAAC1C,KAAK,CAAC;MAClF,oBACEb,OAAA;QAAA2B,QAAA,gBACE3B,OAAA;UAAA2B,QAAA,EAAO4B,MAAM,CAACG;QAAI;UAAA3B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC1BlC,OAAA;UAAA2B,QAAA,EAAO4B,MAAM,CAAC1C;QAAK;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC3BlC,OAAA;UAAA2B,QAAA,EAAO4D;QAAK;UAAAxD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA,GAHZ0D,KAAK;QAAA7D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIV,CAAC;IAEV;EACF,CAAC;EAED,oBACElC,OAAA;IAAKkG,SAAS,EAAC,OAAO;IAAAvE,QAAA,gBACpB3B,OAAA;MAAQa,KAAK,EAAEkC,gBAAiB;MAACjB,QAAQ,EAAEkC,oBAAqB;MAAArC,QAAA,gBAC9D3B,OAAA;QAAQa,KAAK,EAAC,KAAK;QAAAc,QAAA,EAAC;MAAG;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAChClC,OAAA;QAAQa,KAAK,EAAC,KAAK;QAAAc,QAAA,EAAC;MAAG;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAChClC,OAAA;QAAQa,KAAK,EAAC,QAAQ;QAAAc,QAAA,EAAC;MAAM;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACtClC,OAAA;QAAQa,KAAK,EAAC,SAAS;QAAAc,QAAA,EAAC;MAAO;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,EAERa,gBAAgB,KAAK,KAAK,iBACzB/C,OAAA;MAAQa,KAAK,EAAEoC,cAAe;MAACnB,QAAQ,EAAEmC,kBAAmB;MAAAtC,QAAA,gBAC1D3B,OAAA;QAAQa,KAAK,EAAC,KAAK;QAAAc,QAAA,EAAC;MAAG;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAC/BgC,eAAe,CAAC8B,GAAG,CAAE5B,MAAM,iBAC1BpE,OAAA;QAAyBa,KAAK,EAAEuD,MAAM,CAACV,IAAK;QAAA/B,QAAA,EACzCyC,MAAM,CAACV;MAAI,GADDU,MAAM,CAAC+B,GAAG;QAAApE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEf,CACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CACT,EAEAgC,eAAe,CACbC,MAAM,CAAEC,MAAM,IAAK;MAClB,IAAInB,cAAc,KAAK,KAAK,EAAE,OAAO,IAAI;MACzC,OAAOmB,MAAM,CAACV,IAAI,KAAKT,cAAc;IACvC,CAAC,CAAC,CACD+C,GAAG,CAAE5B,MAAM,IAAK;MACf,MAAMgC,YAAY,GAAG3D,MAAM,CAAC0B,MAAM,CAC/Bd,KAAK,IAAKA,KAAK,CAACjD,SAAS,KAAKgE,MAAM,CAAC+B,GACxC,CAAC;MACDC,YAAY,CAACC,IAAI,CACf,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIzC,IAAI,CAACyC,CAAC,CAAC1C,SAAS,CAAC,GAAG,IAAIC,IAAI,CAACwC,CAAC,CAACzC,SAAS,CACxD,CAAC;MACD,MAAM2C,WAAW,GAAGJ,YAAY,CAAC,CAAC,CAAC;MAEnC,oBACEpG,OAAA;QAAA2B,QAAA,gBACE3B,OAAA;UAAA2B,QAAA,EAAKyC,MAAM,CAACV;QAAI;UAAA3B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACrBsE,WAAW,IACVA,WAAW,CAAChD,OAAO,CAACwC,GAAG,CAAC,CAACzC,MAAM,EAAEqC,KAAK,KACpCD,cAAc,CAACpC,MAAM,EAAEqC,KAAK,EAAEY,WAAW,CAC3C,CAAC;MAAA,GALKpC,MAAM,CAAC+B,GAAG;QAAApE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMf,CAAC;IAEV,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV;AAACI,GAAA,CAvNQD,KAAK;AAAAoE,GAAA,GAALpE,KAAK;AAyNd,SAASA,KAAK;AAAG,IAAAD,EAAA,EAAAqE,GAAA;AAAAC,YAAA,CAAAtE,EAAA;AAAAsE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}