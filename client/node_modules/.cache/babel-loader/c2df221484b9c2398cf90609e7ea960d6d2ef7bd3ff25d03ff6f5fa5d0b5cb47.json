{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Query.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AverageComponent(_ref) {\n  _s();\n  let {\n    device_id,\n    sensor_name\n  } = _ref;\n  const [timePeriod, setTimePeriod] = useState(\"\");\n  const [average, setAverage] = useState(\"\");\n  const handleInputChange = event => {\n    setTimePeriod(event.target.value);\n  };\n  const handleAverageCalculation = () => {\n    fetch(`/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`).then(response => {\n      console.log(response);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      setAverage(data.average);\n    }).catch(error => {\n      console.log(\"There was an error!\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter time in seconds\",\n      value: timePeriod,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAverageCalculation,\n      children: \"Calculate Average\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), average && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average: \", average]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(AverageComponent, \"IDLUuxCvaML1njbXD8GYy76eaKg=\");\n_c = AverageComponent;\nfunction Query() {\n  _s2();\n  const [devices, setDevices] = useState([]);\n  const [states, setStates] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [sensorHistories, setSensorHistories] = useState({});\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\n  const [selectedState, setSelectedState] = useState({});\n  const [averageCalculationSensor, setAverageCalculationSensor] = useState(null);\n  const [scenario, setScenario] = useState(\"ALL\");\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => {\n      if (data) {\n        setDevices(data);\n        if (scenario !== \"ALL\") {\n          var _relevantDevices$;\n          const relevantDevices = data.filter(device => device === null || device === void 0 ? void 0 : device.name.startsWith(scenario + \"_\"));\n          setSelectedDevice((_relevantDevices$ = relevantDevices[0]) === null || _relevantDevices$ === void 0 ? void 0 : _relevantDevices$._id);\n        } else {\n          setSelectedDevice(\"\");\n        }\n      }\n    });\n    fetch(\"/states\").then(response => response.json()).then(data => {\n      if (data) {\n        setStates(data);\n      }\n    });\n    fetch(\"/boards\").then(response => response.json()).then(data => {\n      if (data) {\n        setBoards(data);\n        let newSensorHistories = {};\n        for (let board of data) {\n          for (let sensor of board === null || board === void 0 ? void 0 : board.sensors) {\n            let sensorName = sensor === null || sensor === void 0 ? void 0 : sensor.name.toLowerCase();\n            if (!newSensorHistories[sensorName]) {\n              newSensorHistories[sensorName] = [];\n            }\n            newSensorHistories[sensorName].push({\n              value: sensor === null || sensor === void 0 ? void 0 : sensor.value,\n              timestamp: new Date()\n            });\n          }\n        }\n        setSensorHistories(newSensorHistories);\n      }\n    });\n  }, [scenario]);\n  const handleDeviceSelect = event => {\n    const selectedValue = event.target.value;\n    setSelectedDevice(selectedValue);\n\n    // Apply scenario-based filtering if a scenario other than \"ALL\" is selected\n    if (scenario !== \"ALL\") {\n      var _relevantDevices$2;\n      const relevantDevices = devices.filter(device => device === null || device === void 0 ? void 0 : device.name.startsWith(scenario + \"_\"));\n      setSelectedDevice((_relevantDevices$2 = relevantDevices[0]) === null || _relevantDevices$2 === void 0 ? void 0 : _relevantDevices$2._id);\n    }\n  };\n  const getDevicesInState = state => {\n    const devicesInState = devices.filter(device => {\n      return states.some(s => {\n        var _s$device_name, _device$name, _s$name;\n        return ((_s$device_name = s.device_name) === null || _s$device_name === void 0 ? void 0 : _s$device_name.toLowerCase()) === ((_device$name = device.name) === null || _device$name === void 0 ? void 0 : _device$name.toLowerCase()) && ((_s$name = s.name) === null || _s$name === void 0 ? void 0 : _s$name.toLowerCase()) === (state === null || state === void 0 ? void 0 : state.toLowerCase());\n      });\n    });\n    return devicesInState.length;\n  };\n  const handleStateSelect = (device, event) => {\n    const selectedValue = event.target.value;\n    setSelectedState({\n      ...selectedState,\n      [device]: selectedValue\n    });\n    const devicesCount = getDevicesInState(selectedValue);\n    console.log(`Devices in state ${selectedValue}: ${devicesCount}`);\n  };\n  const handleAverageCalculationClick = sensor_name => {\n    setAverageCalculationSensor(sensor_name);\n  };\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\n    const history = sensorHistories[sensorName];\n    if (!history) {\n      return false;\n    }\n    const currentTime = new Date();\n    const relevantHistory = history.filter(entry => (currentTime - entry.timestamp) / 1000 <= parameter);\n    if (relevantHistory.length === 0) {\n      return false;\n    }\n    const min = Math.min(...relevantHistory.map(entry => entry.value));\n    const max = Math.max(...relevantHistory.map(entry => entry.value));\n    return max - min <= sensorValue * 0.01;\n  };\n  const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\n    const matchingStates = states.filter(state => {\n      return state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n    });\n    let result = \"Default\";\n    for (let state of matchingStates) {\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < state.parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > state.parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= state.parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= state.parameter) result = state.name;\n          break;\n        case \"==\":\n          if (sensorValue === state.parameter) result = state.name;\n          break;\n        case \"!=\":\n          if (sensorValue !== state.parameter) result = state.name;\n          break;\n        case \"idle\":\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\n            result = state.name;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n  const deviceBoards = selectedDevice !== \"\" ? boards.filter(board => board.device_id === selectedDevice) : boards;\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  const device = devices.find(device => device._id === selectedDevice);\n  let deviceName;\n  if (device) {\n    deviceName = device.name;\n  } else {\n    console.error(`No device found with id ${selectedDevice}`);\n    deviceName = \"\";\n  }\n  const displaySensors = (sensor, index) => {\n    if ((sensor.name === \"BME\" || sensor.name === \"MPU\") && sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\n      const sensorProperties = sensor.name === \"BME\" ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"] : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\n      return sensor.value.map((val, index) => {\n        const sensorName = `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\n        const state = checkStateForIndividualSensor(sensorName, val, deviceName);\n        if (selectedState[selectedDevice] && selectedState[selectedDevice] !== state) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sensorData\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor Name: \", sensorName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor Value: \", val]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor State: \", state]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAverageCalculationClick(sensorName),\n            children: \"Find Average\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this), averageCalculationSensor === sensorName && /*#__PURE__*/_jsxDEV(AverageComponent, {\n            device_id: selectedDevice,\n            sensor_name: sensorName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)]\n        }, `${sensorName}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this);\n      });\n    } else {\n      const sensorName = sensor.name.toLowerCase();\n      const sensorState = checkStateForIndividualSensor(sensorName, sensor.value, deviceName);\n      if (selectedState[selectedDevice] && selectedState[selectedDevice] !== sensorState) return null;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sensorData\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sensor Name: \", sensorName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sensor Value: \", sensor.value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sensor State: \", sensorState]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAverageCalculationClick(sensorName),\n          children: \"Find Average\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), averageCalculationSensor === sensorName && /*#__PURE__*/_jsxDEV(AverageComponent, {\n          device_id: selectedDevice,\n          sensor_name: sensorName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this)]\n      }, `${sensor.name}-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  console.log(states);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Query\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: event => setScenario(event.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"ALL\",\n        children: \"ALL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"CAR\",\n        children: \"CAR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"FACTORY\",\n        children: \"FACTORY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"OFFICE\",\n        children: \"OFFICE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), scenario !== \"ALL\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleDeviceSelect,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"ALL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this), devices.filter(device => scenario === \"ALL\" || device.name.includes(`${scenario}_`)).map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: device._id,\n          children: device.name\n        }, device._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this), selectedDevice !== \"\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Devices in state:\", \" \", getDevicesInState(selectedState[selectedDevice])]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: event => handleStateSelect(selectedDevice, event),\n          value: selectedState[selectedDevice],\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            default: true,\n            children: \"Select a state\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 17\n          }, this), states.filter(state => state.device_name === deviceName).map((state, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: state.name,\n            children: state.name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true), deviceName && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Device: \", deviceName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 22\n    }, this), \" \", recentBoard && recentBoard.sensors.map(displaySensors)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n}\n_s2(Query, \"rBN8hM4mVajyJ0/d0Hm52A9ZeG8=\");\n_c2 = Query;\nexport { Query };\nvar _c, _c2;\n$RefreshReg$(_c, \"AverageComponent\");\n$RefreshReg$(_c2, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","AverageComponent","_ref","_s","device_id","sensor_name","timePeriod","setTimePeriod","average","setAverage","handleInputChange","event","target","value","handleAverageCalculation","fetch","then","response","console","log","ok","Error","status","json","data","catch","error","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Query","_s2","devices","setDevices","states","setStates","boards","setBoards","sensorHistories","setSensorHistories","selectedDevice","setSelectedDevice","selectedState","setSelectedState","averageCalculationSensor","setAverageCalculationSensor","scenario","setScenario","_relevantDevices$","relevantDevices","filter","device","name","startsWith","_id","newSensorHistories","board","sensor","sensors","sensorName","toLowerCase","push","timestamp","Date","handleDeviceSelect","selectedValue","_relevantDevices$2","getDevicesInState","state","devicesInState","some","s","_s$device_name","_device$name","_s$name","device_name","length","handleStateSelect","devicesCount","handleAverageCalculationClick","checkIdleState","sensorValue","parameter","history","currentTime","relevantHistory","entry","min","Math","map","max","checkStateForIndividualSensor","deviceName","matchingStates","result","condition","deviceBoards","sort","a","b","recentBoard","find","displaySensors","index","Array","isArray","sensorProperties","val","className","sensorState","includes","default","_c2","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Query.css\";\r\n\r\nfunction AverageComponent({ device_id, sensor_name }) {\r\n  const [timePeriod, setTimePeriod] = useState(\"\");\r\n  const [average, setAverage] = useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    setTimePeriod(event.target.value);\r\n  };\r\n\r\n  const handleAverageCalculation = () => {\r\n    fetch(\r\n      `/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`\r\n    )\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setAverage(data.average);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"There was an error!\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Enter time in seconds\"\r\n        value={timePeriod}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button onClick={handleAverageCalculation}>Calculate Average</button>\r\n      {average && <p>Average: {average}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [sensorHistories, setSensorHistories] = useState({});\r\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n  const [selectedState, setSelectedState] = useState({});\r\n  const [averageCalculationSensor, setAverageCalculationSensor] =\r\n    useState(null);\r\n  const [scenario, setScenario] = useState(\"ALL\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          setDevices(data);\r\n          if (scenario !== \"ALL\") {\r\n            const relevantDevices = data.filter((device) =>\r\n              device?.name.startsWith(scenario + \"_\")\r\n            );\r\n            setSelectedDevice(relevantDevices[0]?._id);\r\n          } else {\r\n            setSelectedDevice(\"\");\r\n          }\r\n        }\r\n      });\r\n\r\n    fetch(\"/states\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          setStates(data);\r\n        }\r\n      });\r\n\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          setBoards(data);\r\n          let newSensorHistories = {};\r\n          for (let board of data) {\r\n            for (let sensor of board?.sensors) {\r\n              let sensorName = sensor?.name.toLowerCase();\r\n              if (!newSensorHistories[sensorName]) {\r\n                newSensorHistories[sensorName] = [];\r\n              }\r\n              newSensorHistories[sensorName].push({\r\n                value: sensor?.value,\r\n                timestamp: new Date(),\r\n              });\r\n            }\r\n          }\r\n          setSensorHistories(newSensorHistories);\r\n        }\r\n      });\r\n  }, [scenario]);\r\n\r\n  const handleDeviceSelect = (event) => {\r\n    const selectedValue = event.target.value;\r\n    setSelectedDevice(selectedValue);\r\n\r\n    // Apply scenario-based filtering if a scenario other than \"ALL\" is selected\r\n    if (scenario !== \"ALL\") {\r\n      const relevantDevices = devices.filter((device) =>\r\n        device?.name.startsWith(scenario + \"_\")\r\n      );\r\n      setSelectedDevice(relevantDevices[0]?._id);\r\n    }\r\n  };\r\n\r\n  const getDevicesInState = (state) => {\r\n    const devicesInState = devices.filter((device) => {\r\n      return states.some(\r\n        (s) =>\r\n          s.device_name?.toLowerCase() === device.name?.toLowerCase() &&\r\n          s.name?.toLowerCase() === state?.toLowerCase()\r\n      );\r\n    });\r\n    return devicesInState.length;\r\n  };\r\n\r\n  const handleStateSelect = (device, event) => {\r\n    const selectedValue = event.target.value;\r\n    setSelectedState({\r\n      ...selectedState,\r\n      [device]: selectedValue,\r\n    });\r\n    const devicesCount = getDevicesInState(selectedValue);\r\n    console.log(`Devices in state ${selectedValue}: ${devicesCount}`);\r\n  };\r\n\r\n  const handleAverageCalculationClick = (sensor_name) => {\r\n    setAverageCalculationSensor(sensor_name);\r\n  };\r\n\r\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\r\n    const history = sensorHistories[sensorName];\r\n    if (!history) {\r\n      return false;\r\n    }\r\n    const currentTime = new Date();\r\n    const relevantHistory = history.filter(\r\n      (entry) => (currentTime - entry.timestamp) / 1000 <= parameter\r\n    );\r\n    if (relevantHistory.length === 0) {\r\n      return false;\r\n    }\r\n    const min = Math.min(...relevantHistory.map((entry) => entry.value));\r\n    const max = Math.max(...relevantHistory.map((entry) => entry.value));\r\n    return max - min <= sensorValue * 0.01;\r\n  };\r\n\r\n  const checkStateForIndividualSensor = (\r\n    sensorName,\r\n    sensorValue,\r\n    deviceName\r\n  ) => {\r\n    const matchingStates = states.filter((state) => {\r\n      return (\r\n        state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase()\r\n      );\r\n    });\r\n\r\n    let result = \"Default\";\r\n\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"==\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        case \"!=\":\r\n          if (sensorValue !== state.parameter) result = state.name;\r\n          break;\r\n        case \"idle\":\r\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\r\n            result = state.name;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const deviceBoards =\r\n    selectedDevice !== \"\"\r\n      ? boards.filter((board) => board.device_id === selectedDevice)\r\n      : boards;\r\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n  const recentBoard = deviceBoards[0];\r\n\r\n  const device = devices.find((device) => device._id === selectedDevice);\r\n\r\n  let deviceName;\r\n  if (device) {\r\n    deviceName = device.name;\r\n  } else {\r\n    console.error(`No device found with id ${selectedDevice}`);\r\n    deviceName = \"\";\r\n  }\r\n\r\n  const displaySensors = (sensor, index) => {\r\n    if (\r\n      (sensor.name === \"BME\" || sensor.name === \"MPU\") &&\r\n      sensor.type === \"i2c\" &&\r\n      Array.isArray(sensor.value)\r\n    ) {\r\n      const sensorProperties =\r\n        sensor.name === \"BME\"\r\n          ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"]\r\n          : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\r\n      return sensor.value.map((val, index) => {\r\n        const sensorName =\r\n          `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\r\n        const state = checkStateForIndividualSensor(\r\n          sensorName,\r\n          val,\r\n          deviceName\r\n        );\r\n        if (\r\n          selectedState[selectedDevice] &&\r\n          selectedState[selectedDevice] !== state\r\n        )\r\n          return null;\r\n        return (\r\n          <div key={`${sensorName}-${index}`} className=\"sensorData\">\r\n            <p>Sensor Name: {sensorName}</p>\r\n            <p>Sensor Value: {val}</p>\r\n            <p>Sensor State: {state}</p>\r\n            <button onClick={() => handleAverageCalculationClick(sensorName)}>\r\n              Find Average\r\n            </button>\r\n            {averageCalculationSensor === sensorName && (\r\n              <AverageComponent\r\n                device_id={selectedDevice}\r\n                sensor_name={sensorName}\r\n              />\r\n            )}\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      const sensorName = sensor.name.toLowerCase();\r\n      const sensorState = checkStateForIndividualSensor(\r\n        sensorName,\r\n        sensor.value,\r\n        deviceName\r\n      );\r\n\r\n      if (\r\n        selectedState[selectedDevice] &&\r\n        selectedState[selectedDevice] !== sensorState\r\n      )\r\n        return null;\r\n\r\n      return (\r\n        <div key={`${sensor.name}-${index}`} className=\"sensorData\">\r\n          <p>Sensor Name: {sensorName}</p>\r\n          <p>Sensor Value: {sensor.value}</p>\r\n          <p>Sensor State: {sensorState}</p>\r\n          <button onClick={() => handleAverageCalculationClick(sensorName)}>\r\n            Find Average\r\n          </button>\r\n          {averageCalculationSensor === sensorName && (\r\n            <AverageComponent\r\n              device_id={selectedDevice}\r\n              sensor_name={sensorName}\r\n            />\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  console.log(states);\r\n\r\n  return (\r\n    <div className=\"Query\">\r\n      <select onChange={(event) => setScenario(event.target.value)}>\r\n        <option value=\"ALL\">ALL</option>\r\n        <option value=\"CAR\">CAR</option>\r\n        <option value=\"FACTORY\">FACTORY</option>\r\n        <option value=\"OFFICE\">OFFICE</option>\r\n      </select>\r\n      {scenario !== \"ALL\" && (\r\n        <>\r\n          <select onChange={handleDeviceSelect}>\r\n            <option value=\"\">ALL</option>\r\n            {devices\r\n              .filter(\r\n                (device) =>\r\n                  scenario === \"ALL\" || device.name.includes(`${scenario}_`)\r\n              )\r\n              .map((device) => (\r\n                <option key={device._id} value={device._id}>\r\n                  {device.name}\r\n                </option>\r\n              ))}\r\n          </select>\r\n          {selectedDevice !== \"\" && (\r\n            <>\r\n              <p>\r\n                Devices in state:{\" \"}\r\n                {getDevicesInState(selectedState[selectedDevice])}\r\n              </p>\r\n              <select\r\n                onChange={(event) => handleStateSelect(selectedDevice, event)}\r\n                value={selectedState[selectedDevice]}\r\n              >\r\n                <option value=\"\" default>\r\n                  Select a state\r\n                </option>\r\n                {states\r\n                  .filter((state) => state.device_name === deviceName)\r\n                  .map((state, index) => (\r\n                    <option key={index} value={state.name}>\r\n                      {state.name}\r\n                    </option>\r\n                  ))}\r\n              </select>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {deviceName && <h2>Device: {deviceName}</h2>}{\" \"}\r\n      {recentBoard && recentBoard.sensors.map(displaySensors)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}