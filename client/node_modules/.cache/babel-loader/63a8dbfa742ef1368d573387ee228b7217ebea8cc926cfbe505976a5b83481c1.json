{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Query() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => {\n      if (data) {\n        setDevices(data);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Query\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All Devices:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), devices.length > 0 ? devices.map(device => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Device: \", device.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), device.sensors.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Sensors:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: device.sensors.map(sensor => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Sensor Name: \", sensor.name, \", Type: \", sensor.type]\n          }, sensor._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No sensors found for this device.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }, this)]\n    }, device._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No devices found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(Query, \"+pBxWusV5TorQrWXgdafIbYrAiQ=\");\n_c = Query;\nvar _c;\n$RefreshReg$(_c, \"Query\");","map":{"version":3,"names":["Query","_s","devices","setDevices","useState","useEffect","fetch","then","response","json","data","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","device","name","sensors","sensor","type","_id","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["function Query() {\r\n  const [devices, setDevices] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          setDevices(data);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Query\">\r\n      <h2>All Devices:</h2>\r\n      {devices.length > 0 ? (\r\n        devices.map((device) => (\r\n          <div key={device._id}>\r\n            <h3>Device: {device.name}</h3>\r\n            {device.sensors.length > 0 ? (\r\n              <div>\r\n                <h4>Sensors:</h4>\r\n                <ul>\r\n                  {device.sensors.map((sensor) => (\r\n                    <li key={sensor._id}>\r\n                      Sensor Name: {sensor.name}, Type: {sensor.type}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            ) : (\r\n              <p>No sensors found for this device.</p>\r\n            )}\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>No devices found.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,SAASA,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACdC,KAAK,CAAC,UAAU,CAAC,CACdC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd,IAAIA,IAAI,EAAE;QACRP,UAAU,CAACO,IAAI,CAAC;MAClB;IACF,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEC,OAAA;IAAKC,SAAS,EAAC,OAAO;IAAAC,QAAA,gBACpBF,OAAA;MAAAE,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBf,OAAO,CAACgB,MAAM,GAAG,CAAC,GACjBhB,OAAO,CAACiB,GAAG,CAAEC,MAAM,iBACjBT,OAAA;MAAAE,QAAA,gBACEF,OAAA;QAAAE,QAAA,GAAI,UAAQ,EAACO,MAAM,CAACC,IAAI;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAC7BG,MAAM,CAACE,OAAO,CAACJ,MAAM,GAAG,CAAC,gBACxBP,OAAA;QAAAE,QAAA,gBACEF,OAAA;UAAAE,QAAA,EAAI;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjBN,OAAA;UAAAE,QAAA,EACGO,MAAM,CAACE,OAAO,CAACH,GAAG,CAAEI,MAAM,iBACzBZ,OAAA;YAAAE,QAAA,GAAqB,eACN,EAACU,MAAM,CAACF,IAAI,EAAC,UAAQ,EAACE,MAAM,CAACC,IAAI;UAAA,GADvCD,MAAM,CAACE,GAAG;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEf,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,gBAENN,OAAA;QAAAE,QAAA,EAAG;MAAiC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACxC;IAAA,GAfOG,MAAM,CAACK,GAAG;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAgBf,CACN,CAAC,gBAEFN,OAAA;MAAAE,QAAA,EAAG;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACxB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChB,EAAA,CAzCQD,KAAK;AAAA0B,EAAA,GAAL1B,KAAK;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}