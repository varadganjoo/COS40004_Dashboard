{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Modal.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./Modal.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Modal(_ref) {\n  _s();\n  let {\n    device,\n    states,\n    onClose\n  } = _ref;\n  const [boards, setBoards] = useState([]);\n  const [sensorHistories, setSensorHistories] = useState({});\n  useEffect(() => {\n    // Establish a WebSocket connection with the server\n    const socket = io(\"http://localhost:3001\");\n\n    // When a new board data is received, update the state\n    socket.on(\"board\", board => {\n      if (board.device_id === device._id) {\n        setBoards(boards => [board, ...boards]);\n\n        // Save sensor histories\n        let newSensorHistories = {\n          ...sensorHistories\n        };\n        for (let sensor of board.sensors) {\n          let sensorName = sensor.name.toLowerCase();\n          if (!newSensorHistories[sensorName]) {\n            newSensorHistories[sensorName] = [];\n          }\n          newSensorHistories[sensorName].push({\n            value: sensor.value,\n            timestamp: new Date()\n          });\n        }\n        setSensorHistories(newSensorHistories);\n      }\n    });\n\n    // Fetch initial board data\n    fetch(\"/boards\").then(response => response.json()).then(data => setBoards(data));\n\n    // Disconnect the socket when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, [device._id]);\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\n    const history = sensorHistories[sensorName];\n    if (!history || history.length < 2) {\n      return false;\n    }\n    let isIdle = true;\n    let previousValue = history[0].value;\n    let previousTimestamp = history[0].timestamp;\n    for (let i = 1; i < history.length; i++) {\n      let currentValue = history[i].value;\n      let currentTimestamp = history[i].timestamp;\n      let percentageChange = Math.abs(currentValue - previousValue) / previousValue * 100;\n      if (percentageChange > 1 || currentTimestamp - previousTimestamp > parameter * 1000) {\n        isIdle = false;\n        break;\n      }\n      previousValue = currentValue;\n      previousTimestamp = currentTimestamp;\n    }\n    return isIdle;\n  };\n  const checkStateForIndividualSensor = (sensorName, sensorValue) => {\n    const matchingStates = states.filter(state => {\n      return state.device_name.toLowerCase() === device.name.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n    });\n    let result = \"Default\";\n    for (let state of matchingStates) {\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < state.parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > state.parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= state.parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= state.parameter) result = state.name;\n          break;\n        case \"=\":\n          if (sensorValue === state.parameter) result = state.name;\n          break;\n        case \"idle\":\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\n            result = state.name;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n\n  // Get the most recent board data for this device\n  const deviceBoards = boards.filter(board => board.device_id === device._id);\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close-button\",\n        onClick: onClose,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: device.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), recentBoard && /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sensor Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: recentBoard.sensors.map((sensor, sensorIndex) => {\n            if ((sensor.name === \"BME\" || sensor.name === \"MPU\") && sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\n              const sensorProperties = sensor.name === \"BME\" ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"] : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\n              return sensor.value.map((val, index) => {\n                const sensorName = `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\n                const state = checkStateForIndividualSensor(sensorName, val);\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: sensorName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: val\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: state\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 166,\n                    columnNumber: 25\n                  }, this)]\n                }, `${sensor.name}-${index}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 23\n                }, this);\n              });\n            } else if (sensor.name === \"GPS\" && sensor.type === \"uart\" && typeof sensor.value === \"object\") {\n              return Object.entries(sensor.value).map((_ref2, index) => {\n                let [key, val] = _ref2;\n                const sensorName = `${sensor.name}-${key}`.toLowerCase();\n                const state = checkStateForIndividualSensor(sensorName, val);\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: sensorName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: val\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: state\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 27\n                  }, this)]\n                }, `${sensor.name}-${index}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 25\n                }, this);\n              });\n            } else {\n              const state = checkStateForIndividualSensor(sensor.name, sensor.value);\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: state\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 23\n                }, this)]\n              }, `${sensor.name}-${sensorIndex}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 21\n              }, this);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(Modal, \"2QdQgxQPafIoLR+n+8OW3GUoVSY=\");\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","useEffect","useState","io","jsxDEV","_jsxDEV","Modal","_ref","_s","device","states","onClose","boards","setBoards","sensorHistories","setSensorHistories","socket","on","board","device_id","_id","newSensorHistories","sensor","sensors","sensorName","name","toLowerCase","push","value","timestamp","Date","fetch","then","response","json","data","disconnect","checkIdleState","sensorValue","parameter","history","length","isIdle","previousValue","previousTimestamp","i","currentValue","currentTimestamp","percentageChange","Math","abs","checkStateForIndividualSensor","matchingStates","filter","state","device_name","sensor_name","result","condition","deviceBoards","sort","a","b","recentBoard","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Name","map","sensorIndex","type","Array","isArray","sensorProperties","val","index","Object","entries","_ref2","key","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Modal.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"./Modal.css\";\r\n\r\nfunction Modal({ device, states, onClose }) {\r\n  const [boards, setBoards] = useState([]);\r\n  const [sensorHistories, setSensorHistories] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Establish a WebSocket connection with the server\r\n    const socket = io(\"http://localhost:3001\");\r\n\r\n    // When a new board data is received, update the state\r\n    socket.on(\"board\", (board) => {\r\n      if (board.device_id === device._id) {\r\n        setBoards((boards) => [board, ...boards]);\r\n\r\n        // Save sensor histories\r\n        let newSensorHistories = { ...sensorHistories };\r\n        for (let sensor of board.sensors) {\r\n          let sensorName = sensor.name.toLowerCase();\r\n          if (!newSensorHistories[sensorName]) {\r\n            newSensorHistories[sensorName] = [];\r\n          }\r\n          newSensorHistories[sensorName].push({\r\n            value: sensor.value,\r\n            timestamp: new Date(),\r\n          });\r\n        }\r\n        setSensorHistories(newSensorHistories);\r\n      }\r\n    });\r\n\r\n    // Fetch initial board data\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => setBoards(data));\r\n\r\n    // Disconnect the socket when the component unmounts\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [device._id]);\r\n\r\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\r\n    const history = sensorHistories[sensorName];\r\n    if (!history || history.length < 2) {\r\n      return false;\r\n    }\r\n\r\n    let isIdle = true;\r\n    let previousValue = history[0].value;\r\n    let previousTimestamp = history[0].timestamp;\r\n\r\n    for (let i = 1; i < history.length; i++) {\r\n      let currentValue = history[i].value;\r\n      let currentTimestamp = history[i].timestamp;\r\n      let percentageChange =\r\n        (Math.abs(currentValue - previousValue) / previousValue) * 100;\r\n\r\n      if (\r\n        percentageChange > 1 ||\r\n        currentTimestamp - previousTimestamp > parameter * 1000\r\n      ) {\r\n        isIdle = false;\r\n        break;\r\n      }\r\n\r\n      previousValue = currentValue;\r\n      previousTimestamp = currentTimestamp;\r\n    }\r\n\r\n    return isIdle;\r\n  };\r\n\r\n  const checkStateForIndividualSensor = (sensorName, sensorValue) => {\r\n    const matchingStates = states.filter((state) => {\r\n      return (\r\n        state.device_name.toLowerCase() === device.name.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase()\r\n      );\r\n    });\r\n\r\n    let result = \"Default\";\r\n\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"=\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        case \"idle\":\r\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\r\n            result = state.name;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  // Get the most recent board data for this device\r\n  const deviceBoards = boards.filter((board) => board.device_id === device._id);\r\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n  const recentBoard = deviceBoards[0];\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <span className=\"close-button\" onClick={onClose}>\r\n          &times;\r\n        </span>\r\n        <h2>{device.Name}</h2>\r\n        {recentBoard && (\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Sensor Name</th>\r\n                <th>Value</th>\r\n                <th>State</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {recentBoard.sensors.map((sensor, sensorIndex) => {\r\n                if (\r\n                  (sensor.name === \"BME\" || sensor.name === \"MPU\") &&\r\n                  sensor.type === \"i2c\" &&\r\n                  Array.isArray(sensor.value)\r\n                ) {\r\n                  const sensorProperties =\r\n                    sensor.name === \"BME\"\r\n                      ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"]\r\n                      : [\r\n                          \"Acc-X\",\r\n                          \"Acc-Y\",\r\n                          \"Acc-Z\",\r\n                          \"Gyro-X\",\r\n                          \"Gyro-Y\",\r\n                          \"Gyro-Z\",\r\n                        ];\r\n                  return sensor.value.map((val, index) => {\r\n                    const sensorName =\r\n                      `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\r\n                    const state = checkStateForIndividualSensor(\r\n                      sensorName,\r\n                      val\r\n                    );\r\n                    return (\r\n                      <tr key={`${sensor.name}-${index}`}>\r\n                        <td>{sensorName}</td>\r\n                        <td>{val}</td>\r\n                        <td>{state}</td>\r\n                      </tr>\r\n                    );\r\n                  });\r\n                } else if (\r\n                  sensor.name === \"GPS\" &&\r\n                  sensor.type === \"uart\" &&\r\n                  typeof sensor.value === \"object\"\r\n                ) {\r\n                  return Object.entries(sensor.value).map(\r\n                    ([key, val], index) => {\r\n                      const sensorName = `${sensor.name}-${key}`.toLowerCase();\r\n                      const state = checkStateForIndividualSensor(\r\n                        sensorName,\r\n                        val\r\n                      );\r\n                      return (\r\n                        <tr key={`${sensor.name}-${index}`}>\r\n                          <td>{sensorName}</td>\r\n                          <td>{val}</td>\r\n                          <td>{state}</td>\r\n                        </tr>\r\n                      );\r\n                    }\r\n                  );\r\n                } else {\r\n                  const state = checkStateForIndividualSensor(\r\n                    sensor.name,\r\n                    sensor.value\r\n                  );\r\n                  return (\r\n                    <tr key={`${sensor.name}-${sensorIndex}`}>\r\n                      <td>{sensor.name}</td>\r\n                      <td>{sensor.value}</td>\r\n                      <td>{state}</td>\r\n                    </tr>\r\n                  );\r\n                }\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}