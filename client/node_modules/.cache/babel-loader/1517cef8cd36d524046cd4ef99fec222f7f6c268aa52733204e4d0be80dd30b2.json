{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n// import \"./Query.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Query() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [states, setStates] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => {\n      setDevices(data);\n      setSelectedDevice(data[0]._id); // set the selected device to the first device by default\n    });\n\n    fetch(\"/states\").then(response => response.json()).then(data => setStates(data));\n    fetch(\"/boards\").then(response => response.json()).then(data => setBoards(data));\n  }, []);\n  const handleDeviceSelect = event => {\n    setSelectedDevice(event.target.value);\n  };\n  const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\n    // Rest of the function...\n  };\n  const deviceBoards = boards.filter(board => board.device_id === selectedDevice);\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"query\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleDeviceSelect,\n      value: selectedDevice,\n      children: devices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: device._id,\n        children: device.name\n      }, device._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }, this), recentBoard && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"query-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: devices.find(device => device._id === selectedDevice).name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sensor Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: recentBoard.sensors.map((sensor, sensorIndex) => {\n            if ((sensor.name === \"BME\" || sensor.name === \"NPU\") && sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\n              const sensorProperties = sensor.name === \"BME\" ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"] : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\n              return sensor.value.map((val, index) => {\n                const sensorName = `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\n                const state = checkStateForIndividualSensor(sensorName, val, devices.find(device => device._id === selectedDevice).name);\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: sensorName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: val\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: state\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 29\n                  }, this)]\n                }, `${sensor.name}-${index}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 27\n                }, this);\n              });\n            } else {\n              const state = checkStateForIndividualSensor(sensor.name, sensor.value, devices.find(device => device._id === selectedDevice).name);\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: state\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 27\n                }, this)]\n              }, `${sensor.name}-${sensorIndex}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 25\n              }, this);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n_s(Query, \"Xv2dxjYXKbrPHczxRrrR0E3Ag3c=\");\n_c = Query;\nexport { Query };\nvar _c;\n$RefreshReg$(_c, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Query","_s","devices","setDevices","states","setStates","boards","setBoards","selectedDevice","setSelectedDevice","fetch","then","response","json","data","_id","handleDeviceSelect","event","target","value","checkStateForIndividualSensor","sensorName","sensorValue","deviceName","deviceBoards","filter","board","device_id","sort","a","b","Date","timestamp","recentBoard","className","children","onChange","map","device","name","fileName","_jsxFileName","lineNumber","columnNumber","find","sensors","sensor","sensorIndex","type","Array","isArray","sensorProperties","val","index","toLowerCase","state","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n// import \"./Query.css\";\r\n\r\nfunction Query() {\r\n    const [devices, setDevices] = useState([]);\r\n    const [states, setStates] = useState([]);\r\n    const [boards, setBoards] = useState([]);\r\n    const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n  \r\n    useEffect(() => {\r\n      fetch(\"/devices\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setDevices(data);\r\n          setSelectedDevice(data[0]._id); // set the selected device to the first device by default\r\n        });\r\n  \r\n      fetch(\"/states\")\r\n        .then((response) => response.json())\r\n        .then((data) => setStates(data));\r\n  \r\n      fetch(\"/boards\")\r\n        .then((response) => response.json())\r\n        .then((data) => setBoards(data));\r\n    }, []);\r\n  \r\n    const handleDeviceSelect = (event) => {\r\n      setSelectedDevice(event.target.value);\r\n    };\r\n  \r\n    const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\r\n      // Rest of the function...\r\n    };\r\n  \r\n    const deviceBoards = boards.filter(\r\n      (board) => board.device_id === selectedDevice\r\n    );\r\n    deviceBoards.sort(\r\n      (a, b) => new Date(b.timestamp) - new Date(a.timestamp)\r\n    );\r\n    const recentBoard = deviceBoards[0];\r\n\r\n    return (\r\n        <div className=\"query\">\r\n          <select onChange={handleDeviceSelect} value={selectedDevice}>\r\n            {devices.map((device) => (\r\n              <option key={device._id} value={device._id}>\r\n                {device.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {recentBoard && (\r\n            <div className=\"query-content\">\r\n              <h2>{devices.find(device => device._id === selectedDevice).name}</h2>\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Sensor Name</th>\r\n                    <th>Value</th>\r\n                    <th>State</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {recentBoard.sensors.map((sensor, sensorIndex) => {\r\n                    if (\r\n                      (sensor.name === \"BME\" || sensor.name === \"NPU\") &&\r\n                      sensor.type === \"i2c\" &&\r\n                      Array.isArray(sensor.value)\r\n                    ) {\r\n                      const sensorProperties =\r\n                        sensor.name === \"BME\"\r\n                          ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"]\r\n                          : [\r\n                              \"Acc-X\",\r\n                              \"Acc-Y\",\r\n                              \"Acc-Z\",\r\n                              \"Gyro-X\",\r\n                              \"Gyro-Y\",\r\n                              \"Gyro-Z\",\r\n                            ];\r\n                      return sensor.value.map((val, index) => {\r\n                        const sensorName = `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\r\n                        const state = checkStateForIndividualSensor(\r\n                          sensorName,\r\n                          val,\r\n                          devices.find(device => device._id === selectedDevice).name\r\n                        );\r\n                        return (\r\n                          <tr key={`${sensor.name}-${index}`}>\r\n                            <td>{sensorName}</td>\r\n                            <td>{val}</td>\r\n                            <td>{state}</td>\r\n                          </tr>\r\n                        );\r\n                      });\r\n                    } else {\r\n                      const state = checkStateForIndividualSensor(\r\n                        sensor.name,\r\n                        sensor.value,\r\n                        devices.find(device => device._id === selectedDevice).name\r\n                      );\r\n                      return (\r\n                        <tr key={`${sensor.name}-${sensorIndex}`}>\r\n                          <td>{sensor.name}</td>\r\n                          <td>{sensor.value}</td>\r\n                          <td>{state}</td>\r\n                        </tr>\r\n                      );\r\n                    }\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n      \r\n}\r\n\r\nexport { Query };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}