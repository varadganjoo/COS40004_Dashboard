{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Query.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AverageComponent(_ref) {\n  _s();\n  let {\n    device_id,\n    sensor_name\n  } = _ref;\n  const [timePeriod, setTimePeriod] = useState(\"\");\n  const [average, setAverage] = useState(\"\");\n  const handleInputChange = event => {\n    setTimePeriod(event.target.value);\n  };\n  const handleAverageCalculation = () => {\n    fetch(`/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`).then(response => response.json()).then(data => setAverage(data.average)).catch(error => console.log(\"There was an error!\", error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter time in seconds\",\n      value: timePeriod,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAverageCalculation,\n      children: \"Calculate Average\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), average && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average: \", average]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(AverageComponent, \"IDLUuxCvaML1njbXD8GYy76eaKg=\");\n_c = AverageComponent;\nfunction Query() {\n  _s2();\n  const [devices, setDevices] = useState([]);\n  const [states, setStates] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [sensorHistories, setSensorHistories] = useState({});\n  const [selectedDevice, setSelectedDevice] = useState(\"ALL\");\n  const [selectedState, setSelectedState] = useState({});\n  const [averageCalculationSensor, setAverageCalculationSensor] = useState(null);\n  const [scenario, setScenario] = useState(\"ALL\");\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => {\n      var _relevantDevices$;\n      const relevantDevices = scenario === \"ALL\" ? data : data.filter(device => device.name.startsWith(`${scenario}_`));\n      setDevices(relevantDevices);\n      setSelectedDevice(((_relevantDevices$ = relevantDevices[0]) === null || _relevantDevices$ === void 0 ? void 0 : _relevantDevices$._id) || \"ALL\");\n    });\n    fetch(\"/states\").then(response => response.json()).then(setStates);\n    fetch(\"/boards\").then(response => response.json()).then(data => {\n      setBoards(data);\n      let newSensorHistories = {};\n      for (let board of data) {\n        for (let sensor of board === null || board === void 0 ? void 0 : board.sensors) {\n          let sensorName = sensor === null || sensor === void 0 ? void 0 : sensor.name.toLowerCase();\n          if (!newSensorHistories[sensorName]) {\n            newSensorHistories[sensorName] = [];\n          }\n          newSensorHistories[sensorName].push({\n            value: sensor === null || sensor === void 0 ? void 0 : sensor.value,\n            timestamp: new Date()\n          });\n        }\n      }\n      setSensorHistories(newSensorHistories);\n    });\n  }, [scenario]);\n  const handleDeviceSelect = event => {\n    setSelectedDevice(event.target.value);\n  };\n  const handleStateSelect = (device, event) => {\n    setSelectedState({\n      ...selectedState,\n      [device]: event.target.value\n    });\n  };\n  const handleAverageCalculationClick = sensor_name => {\n    setAverageCalculationSensor(sensor_name);\n  };\n  const checkIdleState = sensor_name => {\n    var _sensorHistories$sens;\n    const sensorHistoriesValues = (_sensorHistories$sens = sensorHistories[sensor_name]) === null || _sensorHistories$sens === void 0 ? void 0 : _sensorHistories$sens.map(history => history.value).slice(-2);\n    return (sensorHistoriesValues === null || sensorHistoriesValues === void 0 ? void 0 : sensorHistoriesValues[0]) === (sensorHistoriesValues === null || sensorHistoriesValues === void 0 ? void 0 : sensorHistoriesValues[1]) && selectedState[selectedDevice] === \"IDLE\";\n  };\n  const displaySensors = (sensor, index) => {\n    const isIdleState = checkIdleState(sensor.name.toLowerCase());\n    if (!isIdleState) {\n      return null;\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensorData\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sensor Name: \", sensor.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sensor Value: \", sensor.value]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sensor State: \", selectedState[selectedDevice]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAverageCalculationClick(sensor.name.toLowerCase()),\n        children: \"Find Average\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), averageCalculationSensor === sensor.name.toLowerCase() && /*#__PURE__*/_jsxDEV(AverageComponent, {\n        device_id: selectedDevice,\n        sensor_name: sensor.name.toLowerCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)]\n    }, sensor.name + index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Query\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: event => setScenario(event.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"ALL\",\n        children: \"ALL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"CAR\",\n        children: \"CAR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"FACTORY\",\n        children: \"FACTORY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"OFFICE\",\n        children: \"OFFICE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleDeviceSelect,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"ALL\",\n        children: \"ALL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), devices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: device._id,\n        children: device.name\n      }, device._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: event => handleStateSelect(selectedDevice, event),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        default: true,\n        children: \"Select a state\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), states.map((state, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: state.name,\n        children: state.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), boards.filter(board => board.device_id === selectedDevice).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)).map(board => board.sensors.map(displaySensors))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_s2(Query, \"qCkcXF7YNlWEtASNUxwQDKzEYzo=\");\n_c2 = Query;\nexport { Query };\nvar _c, _c2;\n$RefreshReg$(_c, \"AverageComponent\");\n$RefreshReg$(_c2, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AverageComponent","_ref","_s","device_id","sensor_name","timePeriod","setTimePeriod","average","setAverage","handleInputChange","event","target","value","handleAverageCalculation","fetch","then","response","json","data","catch","error","console","log","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Query","_s2","devices","setDevices","states","setStates","boards","setBoards","sensorHistories","setSensorHistories","selectedDevice","setSelectedDevice","selectedState","setSelectedState","averageCalculationSensor","setAverageCalculationSensor","scenario","setScenario","_relevantDevices$","relevantDevices","filter","device","name","startsWith","_id","newSensorHistories","board","sensor","sensors","sensorName","toLowerCase","push","timestamp","Date","handleDeviceSelect","handleStateSelect","handleAverageCalculationClick","checkIdleState","_sensorHistories$sens","sensorHistoriesValues","map","history","slice","displaySensors","index","isIdleState","className","default","state","sort","a","b","_c2","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Query.css\";\r\n\r\nfunction AverageComponent({ device_id, sensor_name }) {\r\n  const [timePeriod, setTimePeriod] = useState(\"\");\r\n  const [average, setAverage] = useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    setTimePeriod(event.target.value);\r\n  };\r\n\r\n  const handleAverageCalculation = () => {\r\n    fetch(\r\n      `/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => setAverage(data.average))\r\n      .catch((error) => console.log(\"There was an error!\", error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Enter time in seconds\"\r\n        value={timePeriod}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button onClick={handleAverageCalculation}>Calculate Average</button>\r\n      {average && <p>Average: {average}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [sensorHistories, setSensorHistories] = useState({});\r\n  const [selectedDevice, setSelectedDevice] = useState(\"ALL\");\r\n  const [selectedState, setSelectedState] = useState({});\r\n  const [averageCalculationSensor, setAverageCalculationSensor] = useState(null);\r\n  const [scenario, setScenario] = useState(\"ALL\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const relevantDevices =\r\n          scenario === \"ALL\"\r\n            ? data\r\n            : data.filter((device) => device.name.startsWith(`${scenario}_`));\r\n        setDevices(relevantDevices);\r\n        setSelectedDevice(relevantDevices[0]?._id || \"ALL\");\r\n      });\r\n\r\n    fetch(\"/states\")\r\n      .then((response) => response.json())\r\n      .then(setStates);\r\n\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setBoards(data);\r\n        let newSensorHistories = {};\r\n        for (let board of data) {\r\n          for (let sensor of board?.sensors) {\r\n            let sensorName = sensor?.name.toLowerCase();\r\n            if (!newSensorHistories[sensorName]) {\r\n              newSensorHistories[sensorName] = [];\r\n            }\r\n            newSensorHistories[sensorName].push({\r\n              value: sensor?.value,\r\n              timestamp: new Date(),\r\n            });\r\n          }\r\n        }\r\n        setSensorHistories(newSensorHistories);\r\n      });\r\n  }, [scenario]);\r\n\r\n  const handleDeviceSelect = (event) => {\r\n    setSelectedDevice(event.target.value);\r\n  };\r\n\r\n  const handleStateSelect = (device, event) => {\r\n    setSelectedState({ ...selectedState, [device]: event.target.value });\r\n  };\r\n\r\n  const handleAverageCalculationClick = (sensor_name) => {\r\n    setAverageCalculationSensor(sensor_name);\r\n  };\r\n\r\n  const checkIdleState = (sensor_name) => {\r\n    const sensorHistoriesValues = sensorHistories[sensor_name]\r\n      ?.map((history) => history.value)\r\n      .slice(-2);\r\n    return (\r\n      sensorHistoriesValues?.[0] === sensorHistoriesValues?.[1] &&\r\n      selectedState[selectedDevice] === \"IDLE\"\r\n    );\r\n  };\r\n\r\n  const displaySensors = (sensor, index) => {\r\n    const isIdleState = checkIdleState(sensor.name.toLowerCase());\r\n    if (!isIdleState) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div key={sensor.name + index} className=\"sensorData\">\r\n        <p>Sensor Name: {sensor.name}</p>\r\n        <p>Sensor Value: {sensor.value}</p>\r\n        <p>Sensor State: {selectedState[selectedDevice]}</p>\r\n        <button\r\n          onClick={() =>\r\n            handleAverageCalculationClick(sensor.name.toLowerCase())\r\n          }\r\n        >\r\n          Find Average\r\n        </button>\r\n        {averageCalculationSensor === sensor.name.toLowerCase() && (\r\n          <AverageComponent\r\n            device_id={selectedDevice}\r\n            sensor_name={sensor.name.toLowerCase()}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"Query\">\r\n      <select onChange={(event) => setScenario(event.target.value)}>\r\n        <option value=\"ALL\">ALL</option>\r\n        <option value=\"CAR\">CAR</option>\r\n        <option value=\"FACTORY\">FACTORY</option>\r\n        <option value=\"OFFICE\">OFFICE</option>\r\n      </select>\r\n      <select onChange={handleDeviceSelect}>\r\n        <option value=\"ALL\">ALL</option>\r\n        {devices.map((device) => (\r\n          <option key={device._id} value={device._id}>\r\n            {device.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <select onChange={(event) => handleStateSelect(selectedDevice, event)}>\r\n        <option value=\"\" default>\r\n          Select a state\r\n        </option>\r\n        {states.map((state, index) => (\r\n          <option key={index} value={state.name}>\r\n            {state.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {boards\r\n        .filter((board) => board.device_id === selectedDevice)\r\n        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))\r\n        .map((board) => board.sensors.map(displaySensors))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}