{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n// import \"./Query.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Query() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [states, setStates] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => {\n      setDevices(data);\n      setSelectedDevice(data[0]._id); // set the selected device to the first device by default\n    });\n\n    fetch(\"/states\").then(response => response.json()).then(data => setStates(data));\n    fetch(\"/boards\").then(response => response.json()).then(data => setBoards(data));\n  }, []);\n  const handleDeviceSelect = event => {\n    setSelectedDevice(event.target.value);\n  };\n  const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\n    // Rest of the function...\n  };\n  const deviceBoards = boards.filter(board => board.device_id === selectedDevice);\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"query\",\n    children: devices.map(device => {\n      const deviceBoards = boards.filter(board => board.device_id === device._id);\n      deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n      const recentBoard = deviceBoards[0];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"device-data\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: device.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), recentBoard && /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Sensor Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Value\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"State\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: recentBoard.sensors.map((sensor, sensorIndex) => {\n              const state = checkStateForIndividualSensor(sensor.name, sensor.value, device.name);\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: state\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 25\n                }, this)]\n              }, `${sensor.name}-${sensorIndex}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this)]\n      }, device._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Query, \"Xv2dxjYXKbrPHczxRrrR0E3Ag3c=\");\n_c = Query;\nexport { Query };\nvar _c;\n$RefreshReg$(_c, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Query","_s","devices","setDevices","states","setStates","boards","setBoards","selectedDevice","setSelectedDevice","fetch","then","response","json","data","_id","handleDeviceSelect","event","target","value","checkStateForIndividualSensor","sensorName","sensorValue","deviceName","deviceBoards","filter","board","device_id","sort","a","b","Date","timestamp","recentBoard","className","children","map","device","name","fileName","_jsxFileName","lineNumber","columnNumber","sensors","sensor","sensorIndex","state","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n// import \"./Query.css\";\r\n\r\nfunction Query() {\r\n    const [devices, setDevices] = useState([]);\r\n    const [states, setStates] = useState([]);\r\n    const [boards, setBoards] = useState([]);\r\n    const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n  \r\n    useEffect(() => {\r\n      fetch(\"/devices\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setDevices(data);\r\n          setSelectedDevice(data[0]._id); // set the selected device to the first device by default\r\n        });\r\n  \r\n      fetch(\"/states\")\r\n        .then((response) => response.json())\r\n        .then((data) => setStates(data));\r\n  \r\n      fetch(\"/boards\")\r\n        .then((response) => response.json())\r\n        .then((data) => setBoards(data));\r\n    }, []);\r\n  \r\n    const handleDeviceSelect = (event) => {\r\n      setSelectedDevice(event.target.value);\r\n    };\r\n  \r\n    const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\r\n      // Rest of the function...\r\n    };\r\n  \r\n    const deviceBoards = boards.filter(\r\n      (board) => board.device_id === selectedDevice\r\n    );\r\n    deviceBoards.sort(\r\n      (a, b) => new Date(b.timestamp) - new Date(a.timestamp)\r\n    );\r\n    const recentBoard = deviceBoards[0];\r\n\r\n  return (\r\n    <div className=\"query\">\r\n      {devices.map((device) => {\r\n        const deviceBoards = boards.filter(\r\n          (board) => board.device_id === device._id\r\n        );\r\n        deviceBoards.sort(\r\n          (a, b) => new Date(b.timestamp) - new Date(a.timestamp)\r\n        );\r\n        const recentBoard = deviceBoards[0];\r\n\r\n        return (\r\n          <div key={device._id} className=\"device-data\">\r\n            <h2>{device.name}</h2>\r\n            {recentBoard && (\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Sensor Name</th>\r\n                    <th>Value</th>\r\n                    <th>State</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {recentBoard.sensors.map((sensor, sensorIndex) => {\r\n                    const state = checkStateForIndividualSensor(\r\n                      sensor.name,\r\n                      sensor.value,\r\n                      device.name\r\n                    );\r\n                    return (\r\n                      <tr key={`${sensor.name}-${sensorIndex}`}>\r\n                        <td>{sensor.name}</td>\r\n                        <td>{sensor.value}</td>\r\n                        <td>{state}</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}