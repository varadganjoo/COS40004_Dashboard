{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Query.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AverageComponent(_ref) {\n  _s();\n  let {\n    device_id,\n    sensor_name\n  } = _ref;\n  const [timePeriod, setTimePeriod] = useState(\"\");\n  const [average, setAverage] = useState(\"\");\n  const handleInputChange = event => {\n    setTimePeriod(event.target.value);\n  };\n  const handleAverageCalculation = () => {\n    fetch(`/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`).then(response => {\n      console.log(response);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      // console.log(data);\n      setAverage(data.average);\n    }).catch(error => {\n      console.log(\"There was an error!\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter time in seconds\",\n      value: timePeriod,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAverageCalculation,\n      children: \"Calculate Average\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), average && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average: \", average]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(AverageComponent, \"IDLUuxCvaML1njbXD8GYy76eaKg=\");\n_c = AverageComponent;\nfunction Query() {\n  _s2();\n  const [devices, setDevices] = useState([]);\n  const [states, setStates] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [sensorHistories, setSensorHistories] = useState({});\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\n  const [selectedState, setSelectedState] = useState({});\n  const [averageCalculationSensor, setAverageCalculationSensor] = useState(null);\n  const [scenario, setScenario] = useState(\"ALL\");\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => {\n      if (data) {\n        var _relevantDevices$;\n        const relevantDevices = scenario === \"ALL\" ? data : data.filter(device => device === null || device === void 0 ? void 0 : device.name.startsWith(scenario + \"_\"));\n        setDevices(relevantDevices);\n        setSelectedDevice((_relevantDevices$ = relevantDevices[0]) === null || _relevantDevices$ === void 0 ? void 0 : _relevantDevices$._id);\n      }\n    });\n    fetch(\"/states\").then(response => response.json()).then(data => {\n      if (data) {\n        setStates(data);\n      }\n    });\n    fetch(\"/boards\").then(response => response.json()).then(data => {\n      if (data) {\n        setBoards(data);\n        let newSensorHistories = {};\n        for (let board of data) {\n          for (let sensor of board === null || board === void 0 ? void 0 : board.sensors) {\n            let sensorName = sensor === null || sensor === void 0 ? void 0 : sensor.name.toLowerCase();\n            if (!newSensorHistories[sensorName]) {\n              newSensorHistories[sensorName] = [];\n            }\n            newSensorHistories[sensorName].push({\n              value: sensor === null || sensor === void 0 ? void 0 : sensor.value,\n              timestamp: new Date()\n            });\n          }\n        }\n        setSensorHistories(newSensorHistories);\n      }\n    });\n  }, [scenario]);\n  const handleDeviceSelect = event => {\n    setSelectedDevice(event.target.value === \"ALL\" ? \"ALL\" : event.target.value);\n  };\n  const handleStateSelect = (device, event) => {\n    setSelectedState({\n      ...selectedState,\n      [device]: event.target.value\n    });\n  };\n  const handleAverageCalculationClick = sensor_name => {\n    setAverageCalculationSensor(sensor_name);\n  };\n  const checkIdleState = sensor_name => {\n    var _sensorHistories$sens;\n    const sensorHistoriesValues = (_sensorHistories$sens = sensorHistories[sensor_name]) === null || _sensorHistories$sens === void 0 ? void 0 : _sensorHistories$sens.map(history => history.value).slice(-2);\n    return (sensorHistoriesValues === null || sensorHistoriesValues === void 0 ? void 0 : sensorHistoriesValues[0]) === (sensorHistoriesValues === null || sensorHistoriesValues === void 0 ? void 0 : sensorHistoriesValues[1]) && selectedState[selectedDevice] === \"IDLE\";\n  };\n  const displaySensors = (sensor, index) => {\n    const isIdleState = checkIdleState(sensor.name.toLowerCase());\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Sensor name: \", sensor.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sensor value: \", sensor.value]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), isIdleState && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"red\"\n          },\n          children: \"Alert! Idle state\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAverageCalculationClick(sensor.name),\n          children: \"Calculate average\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), averageCalculationSensor === sensor.name && /*#__PURE__*/_jsxDEV(AverageComponent, {\n          device_id: selectedDevice,\n          sensor_name: sensor.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Update deviceBoards filtering to accommodate \"ALL\" selection\n  const deviceBoards = selectedDevice === \"ALL\" ? boards.filter(board => devices.some(device => device._id === board.device_id)) : boards.filter(board => board.device_id === selectedDevice);\n\n  // Sort the boards and get the recent ones\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n\n  // If \"ALL\" devices are selected, generate a list of recent boards per device\n  const recentBoards = selectedDevice === \"ALL\" ? devices.map(device => deviceBoards.find(board => board.device_id === device._id)) : [deviceBoards[0]];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Query\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: event => setScenario(event.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"ALL\",\n        children: \"ALL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"CAR\",\n        children: \"CAR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"FACTORY\",\n        children: \"FACTORY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"OFFICE\",\n        children: \"OFFICE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), scenario !== \"ALL\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleDeviceSelect,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ALL\",\n          children: \"ALL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), devices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: device._id,\n          children: device.name\n        }, device._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: event => handleStateSelect(selectedDevice, event),\n        value: selectedState[selectedDevice],\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          default: true,\n          children: \"Select a state\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), states.filter(state => state.device_name === deviceName).map((state, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: state.name,\n          children: state.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), recentBoards && recentBoards.map(recentBoard => {\n      // Find the device that matches the board's device_id\n      const device = devices.find(device => device._id === recentBoard.device_id);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Device: \", device.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), recentBoard.sensors.map(displaySensors)]\n      }, recentBoard._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_s2(Query, \"rBN8hM4mVajyJ0/d0Hm52A9ZeG8=\");\n_c2 = Query;\nexport default Query;\nvar _c, _c2;\n$RefreshReg$(_c, \"AverageComponent\");\n$RefreshReg$(_c2, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","AverageComponent","_ref","_s","device_id","sensor_name","timePeriod","setTimePeriod","average","setAverage","handleInputChange","event","target","value","handleAverageCalculation","fetch","then","response","console","log","ok","Error","status","json","data","catch","error","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Query","_s2","devices","setDevices","states","setStates","boards","setBoards","sensorHistories","setSensorHistories","selectedDevice","setSelectedDevice","selectedState","setSelectedState","averageCalculationSensor","setAverageCalculationSensor","scenario","setScenario","_relevantDevices$","relevantDevices","filter","device","name","startsWith","_id","newSensorHistories","board","sensor","sensors","sensorName","toLowerCase","push","timestamp","Date","handleDeviceSelect","handleStateSelect","handleAverageCalculationClick","checkIdleState","_sensorHistories$sens","sensorHistoriesValues","map","history","slice","displaySensors","index","isIdleState","style","color","deviceBoards","some","sort","a","b","recentBoards","find","className","default","state","device_name","deviceName","recentBoard","_c2","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Query.css\";\r\n\r\nfunction AverageComponent({ device_id, sensor_name }) {\r\n  const [timePeriod, setTimePeriod] = useState(\"\");\r\n  const [average, setAverage] = useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    setTimePeriod(event.target.value);\r\n  };\r\n\r\n  const handleAverageCalculation = () => {\r\n    fetch(\r\n      `/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`\r\n    )\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        // console.log(data);\r\n        setAverage(data.average);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"There was an error!\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Enter time in seconds\"\r\n        value={timePeriod}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button onClick={handleAverageCalculation}>Calculate Average</button>\r\n      {average && <p>Average: {average}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [sensorHistories, setSensorHistories] = useState({});\r\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n  const [selectedState, setSelectedState] = useState({});\r\n  const [averageCalculationSensor, setAverageCalculationSensor] =\r\n    useState(null);\r\n  const [scenario, setScenario] = useState(\"ALL\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          const relevantDevices =\r\n            scenario === \"ALL\"\r\n              ? data\r\n              : data.filter((device) =>\r\n                  device?.name.startsWith(scenario + \"_\")\r\n                );\r\n          setDevices(relevantDevices);\r\n          setSelectedDevice(relevantDevices[0]?._id);\r\n        }\r\n      });\r\n\r\n    fetch(\"/states\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          setStates(data);\r\n        }\r\n      });\r\n\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          setBoards(data);\r\n          let newSensorHistories = {};\r\n          for (let board of data) {\r\n            for (let sensor of board?.sensors) {\r\n              let sensorName = sensor?.name.toLowerCase();\r\n              if (!newSensorHistories[sensorName]) {\r\n                newSensorHistories[sensorName] = [];\r\n              }\r\n              newSensorHistories[sensorName].push({\r\n                value: sensor?.value,\r\n                timestamp: new Date(),\r\n              });\r\n            }\r\n          }\r\n          setSensorHistories(newSensorHistories);\r\n        }\r\n      });\r\n  }, [scenario]);\r\n\r\n  const handleDeviceSelect = (event) => {\r\n    setSelectedDevice(event.target.value === \"ALL\" ? \"ALL\" : event.target.value);\r\n  };\r\n\r\n  const handleStateSelect = (device, event) => {\r\n    setSelectedState({\r\n      ...selectedState,\r\n      [device]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleAverageCalculationClick = (sensor_name) => {\r\n    setAverageCalculationSensor(sensor_name);\r\n  };\r\n\r\n  const checkIdleState = (sensor_name) => {\r\n    const sensorHistoriesValues = sensorHistories[sensor_name]\r\n      ?.map((history) => history.value)\r\n      .slice(-2);\r\n    return (\r\n      sensorHistoriesValues?.[0] === sensorHistoriesValues?.[1] &&\r\n      selectedState[selectedDevice] === \"IDLE\"\r\n    );\r\n  };\r\n\r\n  const displaySensors = (sensor, index) => {\r\n    const isIdleState = checkIdleState(sensor.name.toLowerCase());\r\n\r\n    return (\r\n      <div key={index}>\r\n        <h3>Sensor name: {sensor.name}</h3>\r\n        <p>Sensor value: {sensor.value}</p>\r\n        {isIdleState && (\r\n          <div>\r\n            <p style={{ color: \"red\" }}>Alert! Idle state</p>\r\n            <button\r\n              onClick={() => handleAverageCalculationClick(sensor.name)}\r\n            >\r\n              Calculate average\r\n            </button>\r\n            {averageCalculationSensor === sensor.name && (\r\n              <AverageComponent\r\n                device_id={selectedDevice}\r\n                sensor_name={sensor.name}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Update deviceBoards filtering to accommodate \"ALL\" selection\r\n  const deviceBoards = selectedDevice === \"ALL\" ?\r\n    boards.filter(board => devices.some(device => device._id === board.device_id)) :\r\n    boards.filter(board => board.device_id === selectedDevice);\r\n\r\n  // Sort the boards and get the recent ones\r\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n\r\n  // If \"ALL\" devices are selected, generate a list of recent boards per device\r\n  const recentBoards = selectedDevice === \"ALL\" ? \r\n    devices.map(device => deviceBoards.find(board => board.device_id === device._id)) : \r\n    [deviceBoards[0]];\r\n\r\n  return (\r\n    <div className=\"Query\">\r\n      <select onChange={(event) => setScenario(event.target.value)}>\r\n        <option value=\"ALL\">ALL</option>\r\n        <option value=\"CAR\">CAR</option>\r\n        <option value=\"FACTORY\">FACTORY</option>\r\n        <option value=\"OFFICE\">OFFICE</option>\r\n      </select>\r\n      {scenario !== \"ALL\" && (\r\n        <>\r\n          <select onChange={handleDeviceSelect}>\r\n            <option value=\"ALL\">ALL</option>\r\n            {devices.map((device) => (\r\n              <option key={device._id} value={device._id}>\r\n                {device.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <select\r\n            onChange={(event) => handleStateSelect(selectedDevice, event)}\r\n            value={selectedState[selectedDevice]}\r\n          >\r\n            <option value=\"\" default>\r\n              Select a state\r\n            </option>\r\n            {states\r\n              .filter((state) => state.device_name === deviceName)\r\n              .map((state, index) => (\r\n                <option key={index} value={state.name}>\r\n                  {state.name}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </>\r\n      )}\r\n      {recentBoards && recentBoards.map(recentBoard => {\r\n        // Find the device that matches the board's device_id\r\n        const device = devices.find(device => device._id === recentBoard.device_id);\r\n        \r\n        return (\r\n          <div key={recentBoard._id}>\r\n            <h2>Device: {device.name}</h2>\r\n            {recentBoard.sensors.map(displaySensors)}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Query;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}