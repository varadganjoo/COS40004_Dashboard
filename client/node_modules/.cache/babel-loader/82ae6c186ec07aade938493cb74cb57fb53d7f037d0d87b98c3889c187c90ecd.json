{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Query() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [deviceData, setDeviceData] = useState([]);\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => setDevices(data));\n  }, []);\n  useEffect(() => {\n    devices.forEach(device => {\n      fetch(`/boards/device/${device._id}`).then(response => response.json()).then(data => {\n        if (data._id) {\n          setDeviceData(prevData => [...prevData, data]);\n        }\n      }).catch(error => console.error(\"Failed to fetch data:\", error));\n    });\n  }, [devices]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Query Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), deviceData.map(board => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: new Date(board.timestamp).toLocaleString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), board.sensors.map((sensor, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"device\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [sensor.name, \": \", JSON.stringify(sensor.value)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this))]\n    }, board._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(Query, \"xDA6NJt2GMntc/1yNzTH8u7uLeU=\");\n_c = Query;\nexport { Query };\nvar _c;\n$RefreshReg$(_c, \"Query\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Query","_s","devices","setDevices","deviceData","setDeviceData","fetch","then","response","json","data","forEach","device","_id","prevData","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","board","Date","timestamp","toLocaleString","sensors","sensor","index","className","name","JSON","stringify","value","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [deviceData, setDeviceData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => setDevices(data));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    devices.forEach((device) => {\r\n      fetch(`/boards/device/${device._id}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data._id) {\r\n            setDeviceData((prevData) => [...prevData, data]);\r\n          }\r\n        })\r\n        .catch((error) => console.error(\"Failed to fetch data:\", error));\r\n    });\r\n  }, [devices]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Query Page</h1>\r\n      {deviceData.map((board) => (\r\n        <div key={board._id}>\r\n          <h2>{new Date(board.timestamp).toLocaleString()}</h2>\r\n          {board.sensors.map((sensor, index) => (\r\n            <div className=\"device\">\r\n              <p key={index}>\r\n                {sensor.name}: {JSON.stringify(sensor.value)}\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,UAAU,CAAC,CACdC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKP,UAAU,CAACO,IAAI,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAENb,SAAS,CAAC,MAAM;IACdK,OAAO,CAACS,OAAO,CAAEC,MAAM,IAAK;MAC1BN,KAAK,CAAE,kBAAiBM,MAAM,CAACC,GAAI,EAAC,CAAC,CAClCN,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;QACd,IAAIA,IAAI,CAACG,GAAG,EAAE;UACZR,aAAa,CAAES,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAEJ,IAAI,CAAC,CAAC;QAClD;MACF,CAAC,CAAC,CACDK,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;IACpE,CAAC,CAAC;EACJ,CAAC,EAAE,CAACd,OAAO,CAAC,CAAC;EAEb,oBACEH,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAClBlB,UAAU,CAACmB,GAAG,CAAEC,KAAK,iBACpBzB,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAAmB,QAAA,EAAK,IAAIO,IAAI,CAACD,KAAK,CAACE,SAAS,CAAC,CAACC,cAAc,CAAC;MAAC;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACpDE,KAAK,CAACI,OAAO,CAACL,GAAG,CAAC,CAACM,MAAM,EAAEC,KAAK,kBAC/B/B,OAAA;QAAKgC,SAAS,EAAC,QAAQ;QAAAb,QAAA,eACrBnB,OAAA;UAAAmB,QAAA,GACGW,MAAM,CAACG,IAAI,EAAC,IAAE,EAACC,IAAI,CAACC,SAAS,CAACL,MAAM,CAACM,KAAK,CAAC;QAAA,GADtCL,KAAK;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACN,CAAC;IAAA,GARME,KAAK,CAACX,GAAG;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASd,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACrB,EAAA,CAxCQD,KAAK;AAAAoC,EAAA,GAALpC,KAAK;AA0Cd,SAASA,KAAK;AAAG,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}