{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Query.css\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AverageComponent(_ref) {\n  _s();\n  let {\n    device_id,\n    sensor_name\n  } = _ref;\n  const [timePeriod, setTimePeriod] = useState(\"\");\n  const [average, setAverage] = useState(\"\");\n  const handleInputChange = event => {\n    setTimePeriod(event.target.value);\n  };\n  const handleAverageCalculation = () => {\n    fetch(`/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`).then(response => {\n      console.log(response);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      setAverage(data.average);\n    }).catch(error => {\n      console.log(\"There was an error!\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter time in seconds\",\n      value: timePeriod,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAverageCalculation,\n      children: \"Calculate Average\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), average && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average: \", average]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(AverageComponent, \"IDLUuxCvaML1njbXD8GYy76eaKg=\");\n_c = AverageComponent;\nfunction Query() {\n  _s2();\n  const [devices, setDevices] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [states, setStates] = useState([]);\n  const [selectedScenario, setSelectedScenario] = useState(\"\");\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\n  const [selectedState, setSelectedState] = useState(\"\");\n  const [sensorHistories, setSensorHistories] = useState({});\n  const fetchDevices = async () => {\n    const response = await fetch(\"/devices\");\n    const data = await response.json();\n    setDevices(data);\n  };\n  const fetchBoards = async () => {\n    const response = await fetch(\"/boards\");\n    const data = await response.json();\n    setBoards(data);\n  };\n  const fetchStates = async () => {\n    const response = await fetch(\"/states\");\n    const data = await response.json();\n    setStates(data);\n  };\n  useEffect(() => {\n    fetchDevices();\n    fetchBoards();\n    fetchStates();\n  }, []);\n  useEffect(() => {\n    const interval = setInterval(fetchBoards, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  const handleScenarioChange = event => {\n    setSelectedScenario(event.target.value);\n    setSelectedDevice(\"\");\n  };\n  const handleDeviceChange = event => {\n    setSelectedDevice(event.target.value);\n  };\n  const handleStateChange = event => {\n    setSelectedState(event.target.value);\n  };\n  const scenarioDevices = devices.filter(device => {\n    if (selectedScenario === \"ALL\") return true;\n    return device.name.startsWith(selectedScenario + \"_\");\n  });\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\n    const history = sensorHistories[sensorName];\n    if (!history || history.length < 2) {\n      return false;\n    }\n    let isIdle = true;\n    let previousValue = history[0].value;\n    let previousTimestamp = history[0].timestamp;\n    for (let i = 1; i < history.length; i++) {\n      let currentValue = history[i].value;\n      let currentTimestamp = history[i].timestamp;\n      let percentageChange = Math.abs(currentValue - previousValue) / previousValue * 100;\n      if (percentageChange > 1 || currentTimestamp - previousTimestamp > parameter * 1000) {\n        isIdle = false;\n        break;\n      }\n      previousValue = currentValue;\n      previousTimestamp = currentTimestamp;\n    }\n    return isIdle;\n  };\n  const checkStateForIndividualSensor = (deviceName, sensorName, sensorValue) => {\n    const matchingStates = states.filter(state => {\n      console.log(state.device_name.toLowerCase(), deviceName.toLowerCase());\n      return state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n    });\n    let result = \"Default\";\n    for (let state of matchingStates) {\n      let parameter;\n      if (state.parameter) {\n        parameter = parseFloat(state.parameter);\n      }\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= parameter) result = state.name;\n          break;\n        case \"=\":\n          if (sensorValue === parameter) result = state.name;\n          break;\n        case \"idle\":\n          if (checkIdleState(sensorName, sensorValue, parameter)) {\n            result = state.name;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n  const displaySensors = (sensor, index, board) => {\n    var _devices$find;\n    const deviceName = (_devices$find = devices.find(device => device._id === board.device_id)) === null || _devices$find === void 0 ? void 0 : _devices$find.name;\n    if ((sensor.name === \"BME\" || sensor.name === \"MPU\") && sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\n      const sensorProperties = sensor.name === \"BME\" ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"] : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\n      return sensor.value.map((val, index) => {\n        const sensorName = `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\n        const state = checkStateForIndividualSensor(deviceName, sensorName, val);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: sensorName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: val\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AverageComponent, {\n            device_id: board.device_id,\n            sensor_name: sensorName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)]\n        }, `${sensor.name}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this);\n      });\n    } else {\n      const state = checkStateForIndividualSensor(deviceName, sensor.name, sensor.value);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: sensor.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: sensor.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AverageComponent, {\n          device_id: board.device_id,\n          sensor_name: sensor.name.toLowerCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  const displayBoards = () => {\n    return boards.map(board => {\n      const device = devices.find(device => device._id === board.device_id);\n      if (device) {\n        const matchesScenario = checkScenario(device.name, selectedScenario);\n        const matchesDevice = !selectedDevice || selectedDevice === \"ALL\" || selectedDevice === device.name;\n        if (matchesScenario && matchesDevice) {\n          const sensorData = board.sensors.map((sensor, index) => displaySensors(sensor, index, board));\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: sensorData\n          }, board._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 18\n          }, this);\n        }\n      }\n      return null;\n    });\n  };\n  const uniqueStates = [\"ALL\", ...new Set(states.map(state => state.name))];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Query\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedScenario,\n      onChange: handleScenarioChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"ALL\",\n        children: \"ALL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"CAR\",\n        children: \"CAR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"OFFICE\",\n        children: \"OFFICE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"FACTORY\",\n        children: \"FACTORY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), selectedScenario !== \"ALL\" && /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedDevice,\n      onChange: handleDeviceChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"ALL\",\n        children: \"ALL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), scenarioDevices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: device.name,\n        children: device.name\n      }, device._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this), scenarioDevices.filter(device => {\n      if (selectedDevice === \"ALL\") return true;\n      return device.name === selectedDevice;\n    }).map(device => {\n      const deviceBoards = boards.filter(board => board.device_id === device._id);\n      deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n      const recentBoard = deviceBoards[0];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: device.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 15\n        }, this), recentBoard && recentBoard.sensors.map((sensor, index) => displaySensors(sensor, index, recentBoard))]\n      }, device._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n}\n_s2(Query, \"paAbPTMI68+H7MthA/jRVqw7zD0=\");\n_c2 = Query;\nexport { Query };\nvar _c, _c2;\n$RefreshReg$(_c, \"AverageComponent\");\n$RefreshReg$(_c2, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","io","jsxDEV","_jsxDEV","AverageComponent","_ref","_s","device_id","sensor_name","timePeriod","setTimePeriod","average","setAverage","handleInputChange","event","target","value","handleAverageCalculation","fetch","then","response","console","log","ok","Error","status","json","data","catch","error","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Query","_s2","devices","setDevices","boards","setBoards","states","setStates","selectedScenario","setSelectedScenario","selectedDevice","setSelectedDevice","selectedState","setSelectedState","sensorHistories","setSensorHistories","fetchDevices","fetchBoards","fetchStates","interval","setInterval","clearInterval","handleScenarioChange","handleDeviceChange","handleStateChange","scenarioDevices","filter","device","name","startsWith","checkIdleState","sensorName","sensorValue","parameter","history","length","isIdle","previousValue","previousTimestamp","timestamp","i","currentValue","currentTimestamp","percentageChange","Math","abs","checkStateForIndividualSensor","deviceName","matchingStates","state","device_name","toLowerCase","result","parseFloat","condition","displaySensors","sensor","index","board","_devices$find","find","_id","Array","isArray","sensorProperties","map","val","displayBoards","matchesScenario","checkScenario","matchesDevice","sensorData","sensors","uniqueStates","Set","className","deviceBoards","sort","a","b","Date","recentBoard","_c2","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Query.css\";\r\nimport io from \"socket.io-client\";\r\n\r\nfunction AverageComponent({ device_id, sensor_name }) {\r\n  const [timePeriod, setTimePeriod] = useState(\"\");\r\n  const [average, setAverage] = useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    setTimePeriod(event.target.value);\r\n  };\r\n\r\n  const handleAverageCalculation = () => {\r\n    fetch(\r\n      `/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`\r\n    )\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setAverage(data.average);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"There was an error!\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Enter time in seconds\"\r\n        value={timePeriod}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button onClick={handleAverageCalculation}>Calculate Average</button>\r\n      {average && <p>Average: {average}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [selectedScenario, setSelectedScenario] = useState(\"\");\r\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n  const [selectedState, setSelectedState] = useState(\"\");\r\n  const [sensorHistories, setSensorHistories] = useState({});\r\n\r\n  const fetchDevices = async () => {\r\n    const response = await fetch(\"/devices\");\r\n    const data = await response.json();\r\n    setDevices(data);\r\n  };\r\n\r\n  const fetchBoards = async () => {\r\n    const response = await fetch(\"/boards\");\r\n    const data = await response.json();\r\n    setBoards(data);\r\n  };\r\n\r\n  const fetchStates = async () => {\r\n    const response = await fetch(\"/states\");\r\n    const data = await response.json();\r\n    setStates(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDevices();\r\n    fetchBoards();\r\n    fetchStates();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(fetchBoards, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleScenarioChange = (event) => {\r\n    setSelectedScenario(event.target.value);\r\n    setSelectedDevice(\"\");\r\n  };\r\n\r\n  const handleDeviceChange = (event) => {\r\n    setSelectedDevice(event.target.value);\r\n  };\r\n\r\n  const handleStateChange = (event) => {\r\n    setSelectedState(event.target.value);\r\n  };\r\n\r\n  const scenarioDevices = devices.filter((device) => {\r\n    if (selectedScenario === \"ALL\") return true;\r\n    return device.name.startsWith(selectedScenario + \"_\");\r\n  });\r\n\r\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\r\n    const history = sensorHistories[sensorName];\r\n    if (!history || history.length < 2) {\r\n      return false;\r\n    }\r\n\r\n    let isIdle = true;\r\n    let previousValue = history[0].value;\r\n    let previousTimestamp = history[0].timestamp;\r\n\r\n    for (let i = 1; i < history.length; i++) {\r\n      let currentValue = history[i].value;\r\n      let currentTimestamp = history[i].timestamp;\r\n      let percentageChange =\r\n        (Math.abs(currentValue - previousValue) / previousValue) * 100;\r\n\r\n      if (\r\n        percentageChange > 1 ||\r\n        currentTimestamp - previousTimestamp > parameter * 1000\r\n      ) {\r\n        isIdle = false;\r\n        break;\r\n      }\r\n\r\n      previousValue = currentValue;\r\n      previousTimestamp = currentTimestamp;\r\n    }\r\n\r\n    return isIdle;\r\n  };\r\n\r\n  const checkStateForIndividualSensor = (\r\n    deviceName,\r\n    sensorName,\r\n    sensorValue\r\n  ) => {\r\n    const matchingStates = states.filter((state) => {\r\n      console.log(state.device_name.toLowerCase(), deviceName.toLowerCase());\r\n      return (\r\n        state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase()\r\n      );\r\n    });\r\n\r\n    let result = \"Default\";\r\n\r\n    for (let state of matchingStates) {\r\n      let parameter;\r\n      if (state.parameter) {\r\n        parameter = parseFloat(state.parameter);\r\n      }\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= parameter) result = state.name;\r\n          break;\r\n        case \"=\":\r\n          if (sensorValue === parameter) result = state.name;\r\n          break;\r\n        case \"idle\":\r\n          if (checkIdleState(sensorName, sensorValue, parameter)) {\r\n            result = state.name;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const displaySensors = (sensor, index, board) => {\r\n    const deviceName = devices.find(\r\n      (device) => device._id === board.device_id\r\n    )?.name;\r\n    if (\r\n      (sensor.name === \"BME\" || sensor.name === \"MPU\") &&\r\n      sensor.type === \"i2c\" &&\r\n      Array.isArray(sensor.value)\r\n    ) {\r\n      const sensorProperties =\r\n        sensor.name === \"BME\"\r\n          ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"]\r\n          : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\r\n      return sensor.value.map((val, index) => {\r\n        const sensorName =\r\n          `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\r\n        const state = checkStateForIndividualSensor(\r\n          deviceName,\r\n          sensorName,\r\n          val\r\n        );\r\n        return (\r\n          <div key={`${sensor.name}-${index}`}>\r\n            <span>{sensorName}</span>\r\n            <span>{val}</span>\r\n            <span>{state}</span>\r\n            <AverageComponent\r\n              device_id={board.device_id}\r\n              sensor_name={sensorName}\r\n            />\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      const state = checkStateForIndividualSensor(\r\n        deviceName,\r\n        sensor.name,\r\n        sensor.value\r\n      );\r\n      return (\r\n        <div key={index}>\r\n          <span>{sensor.name}</span>\r\n          <span>{sensor.value}</span>\r\n          <span>{state}</span>\r\n          <AverageComponent\r\n            device_id={board.device_id}\r\n            sensor_name={sensor.name.toLowerCase()}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const displayBoards = () => {\r\n    return boards.map((board) => {\r\n      const device = devices.find((device) => device._id === board.device_id);\r\n      if (device) {\r\n        const matchesScenario = checkScenario(device.name, selectedScenario);\r\n        const matchesDevice =\r\n          !selectedDevice ||\r\n          selectedDevice === \"ALL\" ||\r\n          selectedDevice === device.name;\r\n        if (matchesScenario && matchesDevice) {\r\n          const sensorData = board.sensors.map((sensor, index) =>\r\n            displaySensors(sensor, index, board)\r\n          );\r\n          return <div key={board._id}>{sensorData}</div>;\r\n        }\r\n      }\r\n      return null;\r\n    });\r\n  };\r\n\r\n  const uniqueStates = [\"ALL\", ...new Set(states.map((state) => state.name))];\r\n\r\n  return (\r\n    <div className=\"Query\">\r\n      <select value={selectedScenario} onChange={handleScenarioChange}>\r\n        <option value=\"ALL\">ALL</option>\r\n        <option value=\"CAR\">CAR</option>\r\n        <option value=\"OFFICE\">OFFICE</option>\r\n        <option value=\"FACTORY\">FACTORY</option>\r\n      </select>\r\n\r\n      {selectedScenario !== \"ALL\" && (\r\n        <select value={selectedDevice} onChange={handleDeviceChange}>\r\n          <option value=\"ALL\">ALL</option>\r\n          {scenarioDevices.map((device) => (\r\n            <option key={device._id} value={device.name}>\r\n              {device.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      )}\r\n\r\n      {scenarioDevices\r\n        .filter((device) => {\r\n          if (selectedDevice === \"ALL\") return true;\r\n          return device.name === selectedDevice;\r\n        })\r\n        .map((device) => {\r\n          const deviceBoards = boards.filter(\r\n            (board) => board.device_id === device._id\r\n          );\r\n          deviceBoards.sort(\r\n            (a, b) => new Date(b.timestamp) - new Date(a.timestamp)\r\n          );\r\n          const recentBoard = deviceBoards[0];\r\n\r\n          return (\r\n            <div key={device._id}>\r\n              <h2>{device.name}</h2>\r\n              {recentBoard &&\r\n                recentBoard.sensors.map((sensor, index) =>\r\n                  displaySensors(sensor, index, recentBoard)\r\n                )}\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}