{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Dashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [states, setStates] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const devicesRes = await fetch(\"/devices\");\n        const devicesData = await devicesRes.json();\n        setDevices(devicesData);\n        const boardsRes = await fetch(\"/boards\");\n        const boardsData = await boardsRes.json();\n        setBoards(boardsData);\n        const statesRes = await fetch(\"/states\");\n        const statesData = await statesRes.json();\n        setStates(statesData);\n      } catch (err) {\n        console.error(\"Error fetching data:\", err);\n      }\n    };\n    fetchData();\n  }, []);\n  const getState = (device, board) => {\n    for (const state of states) {\n      if (state.Device === device.SensorList) {\n        const sensorKey = `I2C1-${state.Device}`;\n        const condition = state.Condition;\n        const parameter = parseFloat(state.Parameter);\n        if (condition === \"<\" && board[sensorKey] < parameter) {\n          return state.Name;\n        } else if (condition === \">\" && board[sensorKey] > parameter) {\n          return state.Name;\n        } else if (condition === \"=\" && board[sensorKey] === parameter) {\n          return state.Name;\n        }\n      }\n    }\n    return \"Unknown\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"devices\",\n      children: devices.map(device => {\n        const board = boards.find(board => board._id === device._id);\n        return board && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"device-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: device.Name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"State: \", getState(device, board)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: Object.entries(board).filter(_ref => {\n              let [key] = _ref;\n              return key !== \"_id\" && key !== \"timestamp\";\n            }).map(_ref2 => {\n              let [key, value] = _ref2;\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [key, \": \", value]\n              }, key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this)]\n        }, device._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"3GcCiUCgKGYyulBi+AM5O43f+hg=\");\n_c = Dashboard;\nexport { Dashboard };\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Dashboard","_s","devices","setDevices","boards","setBoards","states","setStates","fetchData","devicesRes","fetch","devicesData","json","boardsRes","boardsData","statesRes","statesData","err","console","error","getState","device","board","state","Device","SensorList","sensorKey","condition","Condition","parameter","parseFloat","Parameter","Name","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","find","_id","Object","entries","filter","_ref","key","_ref2","value","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Dashboard.css\";\r\n\r\nfunction Dashboard() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const devicesRes = await fetch(\"/devices\");\r\n        const devicesData = await devicesRes.json();\r\n        setDevices(devicesData);\r\n\r\n        const boardsRes = await fetch(\"/boards\");\r\n        const boardsData = await boardsRes.json();\r\n        setBoards(boardsData);\r\n\r\n        const statesRes = await fetch(\"/states\");\r\n        const statesData = await statesRes.json();\r\n        setStates(statesData);\r\n      } catch (err) {\r\n        console.error(\"Error fetching data:\", err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const getState = (device, board) => {\r\n    for (const state of states) {\r\n      if (state.Device === device.SensorList) {\r\n        const sensorKey = `I2C1-${state.Device}`;\r\n        const condition = state.Condition;\r\n        const parameter = parseFloat(state.Parameter);\r\n\r\n        if (condition === \"<\" && board[sensorKey] < parameter) {\r\n          return state.Name;\r\n        } else if (condition === \">\" && board[sensorKey] > parameter) {\r\n          return state.Name;\r\n        } else if (condition === \"=\" && board[sensorKey] === parameter) {\r\n          return state.Name;\r\n        }\r\n      }\r\n    }\r\n    return \"Unknown\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h1>Dashboard</h1>\r\n      <div className=\"devices\">\r\n        {devices.map((device) => {\r\n          const board = boards.find((board) => board._id === device._id);\r\n          return (\r\n            board && (\r\n              <div className=\"device-card\" key={device._id}>\r\n                <h2>{device.Name}</h2>\r\n                <p>State: {getState(device, board)}</p>\r\n                <ul>\r\n                  {Object.entries(board)\r\n                    .filter(([key]) => key !== \"_id\" && key !== \"timestamp\")\r\n                    .map(([key, value]) => (\r\n                      <li key={key}>\r\n                        {key}: {value}\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              </div>\r\n            )\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Dashboard };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}