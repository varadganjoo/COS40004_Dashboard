{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Query.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AverageComponent(_ref) {\n  _s();\n  let {\n    device_id,\n    sensor_name\n  } = _ref;\n  const [timePeriod, setTimePeriod] = useState(\"\");\n  const [average, setAverage] = useState(\"\");\n  const handleInputChange = event => {\n    setTimePeriod(event.target.value);\n  };\n  const handleAverageCalculation = () => {\n    fetch(`/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`).then(response => {\n      console.log(response);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      setAverage(data.average);\n    }).catch(error => {\n      console.log(\"There was an error!\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter time in seconds\",\n      value: timePeriod,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAverageCalculation,\n      children: \"Calculate Average\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), average && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average: \", average]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(AverageComponent, \"IDLUuxCvaML1njbXD8GYy76eaKg=\");\n_c = AverageComponent;\nfunction Query() {\n  _s2();\n  const [devices, setDevices] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => {\n      if (data) {\n        var _data$;\n        setDevices(data);\n        setSelectedDevice((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$._id);\n      }\n    });\n    fetch(\"/boards\").then(response => response.json()).then(data => {\n      if (data) {\n        setBoards(data);\n      }\n    });\n  }, []);\n  const handleDeviceSelect = event => {\n    setSelectedDevice(event.target.value);\n  };\n  const deviceBoards = selectedDevice !== \"\" ? boards.filter(board => board.device_id === selectedDevice) : boards;\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  const device = devices.find(device => device._id === selectedDevice);\n  let deviceName;\n  if (device) {\n    deviceName = device.name;\n  } else {\n    console.error(`No device found with id ${selectedDevice}`);\n    deviceName = \"\";\n  }\n  const displaySensors = (sensor, index) => {\n    const sensorName = sensor.name.toLowerCase();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensorData\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sensor Name: \", sensorName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sensor Value: \", sensor.value]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, `${sensor.name}-${index}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Query\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleDeviceSelect,\n      children: devices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: device._id,\n        children: device.name\n      }, device._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), deviceName && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Device: \", deviceName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 22\n    }, this), \" \", recentBoard && recentBoard.sensors.map(displaySensors)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s2(Query, \"XlQ5ogp4sB3FpH7QcsJtduocBQw=\");\n_c2 = Query;\nexport { Query };\nvar _c, _c2;\n$RefreshReg$(_c, \"AverageComponent\");\n$RefreshReg$(_c2, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AverageComponent","_ref","_s","device_id","sensor_name","timePeriod","setTimePeriod","average","setAverage","handleInputChange","event","target","value","handleAverageCalculation","fetch","then","response","console","log","ok","Error","status","json","data","catch","error","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Query","_s2","devices","setDevices","boards","setBoards","selectedDevice","setSelectedDevice","_data$","_id","handleDeviceSelect","deviceBoards","filter","board","sort","a","b","Date","timestamp","recentBoard","device","find","deviceName","name","displaySensors","sensor","index","sensorName","toLowerCase","className","map","sensors","_c2","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Query.css\";\r\n\r\nfunction AverageComponent({ device_id, sensor_name }) {\r\n  const [timePeriod, setTimePeriod] = useState(\"\");\r\n  const [average, setAverage] = useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    setTimePeriod(event.target.value);\r\n  };\r\n\r\n  const handleAverageCalculation = () => {\r\n    fetch(\r\n      `/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`\r\n    )\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setAverage(data.average);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"There was an error!\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Enter time in seconds\"\r\n        value={timePeriod}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button onClick={handleAverageCalculation}>Calculate Average</button>\r\n      {average && <p>Average: {average}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          setDevices(data);\r\n          setSelectedDevice(data[0]?._id);\r\n        }\r\n      });\r\n\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          setBoards(data);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  const handleDeviceSelect = (event) => {\r\n    setSelectedDevice(event.target.value);\r\n  };\r\n\r\n  const deviceBoards =\r\n    selectedDevice !== \"\"\r\n      ? boards.filter((board) => board.device_id === selectedDevice)\r\n      : boards;\r\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n  const recentBoard = deviceBoards[0];\r\n\r\n  const device = devices.find((device) => device._id === selectedDevice);\r\n\r\n  let deviceName;\r\n  if (device) {\r\n    deviceName = device.name;\r\n  } else {\r\n    console.error(`No device found with id ${selectedDevice}`);\r\n    deviceName = \"\";\r\n  }\r\n\r\n  const displaySensors = (sensor, index) => {\r\n    const sensorName = sensor.name.toLowerCase();\r\n    return (\r\n      <div key={`${sensor.name}-${index}`} className=\"sensorData\">\r\n        <p>Sensor Name: {sensorName}</p>\r\n        <p>Sensor Value: {sensor.value}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"Query\">\r\n      <select onChange={handleDeviceSelect}>\r\n        {devices.map((device) => (\r\n          <option key={device._id} value={device._id}>\r\n            {device.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {deviceName && <h2>Device: {deviceName}</h2>}{\" \"}\r\n      {recentBoard && recentBoard.sensors.map(displaySensors)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}