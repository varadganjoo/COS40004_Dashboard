{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Query(_ref) {\n  _s();\n  let {\n    states\n  } = _ref;\n  const [devices, setDevices] = useState([]);\n  const [deviceData, setDeviceData] = useState([]);\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => setDevices(data));\n  }, []);\n  useEffect(() => {\n    devices.forEach(device => {\n      fetch(`/boards/device/${device._id}`).then(response => response.json()).then(data => {\n        data.device_name = device.name;\n        setDeviceData(prevData => [...prevData, data]);\n      }).catch(error => console.error(\"Failed to fetch data:\", error));\n    });\n  }, [devices]);\n  const checkStateForIndividualSensor = (deviceName, sensorName, sensorValue) => {\n    const matchingStates = states.filter(state => {\n      const passCondition = state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n      return passCondition;\n    });\n    let result = \"Default\";\n    for (let state of matchingStates) {\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < state.parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > state.parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= state.parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= state.parameter) result = state.name;\n          break;\n        case \"=\":\n          if (sensorValue === state.parameter) result = state.name;\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Query Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), deviceData.map((board, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: new Date(board.timestamp).toLocaleString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sensor Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: board.sensors.map((sensor, sensorIndex) => {\n            if ((sensor.name === \"BME\" || sensor.name === \"NPU\") && sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\n              const sensorProperties = sensor.name === \"BME\" ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"] : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\n              return sensor.value.map((val, index) => {\n                const sensorName = `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\n                const state = checkStateForIndividualSensor(board.device_name, sensorName, val);\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: sensorName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 100,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: val\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: state\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 25\n                  }, this)]\n                }, `${sensor.name}-${index}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 23\n                }, this);\n              });\n            } else {\n              const state = checkStateForIndividualSensor(board.device_name, sensor.name, sensor.value);\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: state\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 23\n                }, this)]\n              }, `${sensor.name}-${sensorIndex}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 21\n              }, this);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Query, \"xDA6NJt2GMntc/1yNzTH8u7uLeU=\");\n_c = Query;\nexport { Query };\nvar _c;\n$RefreshReg$(_c, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Query","_ref","_s","states","devices","setDevices","deviceData","setDeviceData","fetch","then","response","json","data","forEach","device","_id","device_name","name","prevData","catch","error","console","checkStateForIndividualSensor","deviceName","sensorName","sensorValue","matchingStates","filter","state","passCondition","toLowerCase","sensor_name","result","condition","parameter","children","fileName","_jsxFileName","lineNumber","columnNumber","map","board","index","Date","timestamp","toLocaleString","sensors","sensor","sensorIndex","type","Array","isArray","value","sensorProperties","val","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Query({ states }) {\r\n  const [devices, setDevices] = useState([]);\r\n  const [deviceData, setDeviceData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => setDevices(data));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    devices.forEach((device) => {\r\n      fetch(`/boards/device/${device._id}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          data.device_name = device.name;\r\n          setDeviceData((prevData) => [...prevData, data]);\r\n        })\r\n        .catch((error) => console.error(\"Failed to fetch data:\", error));\r\n    });\r\n  }, [devices]);\r\n\r\n  const checkStateForIndividualSensor = (deviceName, sensorName, sensorValue) => {\r\n    const matchingStates = states.filter((state) => {\r\n      const passCondition =\r\n        state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase();\r\n      return passCondition;\r\n    });\r\n\r\n    let result = \"Default\";\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"=\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Query Page</h1>\r\n      {deviceData.map((board, index) => (\r\n        <div key={index}>\r\n          <h2>{new Date(board.timestamp).toLocaleString()}</h2>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Sensor Name</th>\r\n                <th>Value</th>\r\n                <th>State</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {board.sensors.map((sensor, sensorIndex) => {\r\n                if (\r\n                  (sensor.name === \"BME\" || sensor.name === \"NPU\") &&\r\n                  sensor.type === \"i2c\" &&\r\n                  Array.isArray(sensor.value)\r\n                ) {\r\n                  const sensorProperties =\r\n                    sensor.name === \"BME\"\r\n                      ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"]\r\n                      : [\r\n                          \"Acc-X\",\r\n                          \"Acc-Y\",\r\n                          \"Acc-Z\",\r\n                          \"Gyro-X\",\r\n                          \"Gyro-Y\",\r\n                          \"Gyro-Z\",\r\n                        ];\r\n                  return sensor.value.map((val, index) => {\r\n                    const sensorName =\r\n                      `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\r\n                    const state = checkStateForIndividualSensor(\r\n                      board.device_name,\r\n                      sensorName,\r\n                      val\r\n                    );\r\n                    return (\r\n                      <tr key={`${sensor.name}-${index}`}>\r\n                        <td>{sensorName}</td>\r\n                        <td>{val}</td>\r\n                        <td>{state}</td>\r\n                      </tr>\r\n                    );\r\n                  });\r\n                } else {\r\n                  const state = checkStateForIndividualSensor(\r\n                    board.device_name,\r\n                    sensor.name,\r\n                    sensor.value\r\n                  );\r\n                  return (\r\n                    <tr key={`${sensor.name}-${sensorIndex}`}>\r\n                      <td>{sensor.name}</td>\r\n                      <td>{sensor.value}</td>\r\n                      <td>{state}</td>\r\n                    </tr>\r\n                  );\r\n                }\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}