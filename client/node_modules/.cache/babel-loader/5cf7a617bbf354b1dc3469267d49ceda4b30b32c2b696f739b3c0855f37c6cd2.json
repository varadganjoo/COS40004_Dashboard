{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Query() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [states, setStates] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => {\n      var _data$;\n      setDevices(data);\n      setSelectedDevice((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$._id); // set the selected device to the first device by default\n    });\n\n    fetch(\"/states\").then(response => response.json()).then(data => setStates(data));\n    fetch(\"/boards\").then(response => response.json()).then(data => setBoards(data));\n  }, []);\n  const handleDeviceSelect = event => {\n    setSelectedDevice(event.target.value);\n  };\n  const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\n    const matchingStates = states.filter(state => {\n      const passCondition = state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n      return passCondition;\n    });\n    let result = \"Default\";\n    for (let state of matchingStates) {\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < state.parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > state.parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= state.parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= state.parameter) result = state.name;\n          break;\n        case \"=\":\n          if (sensorValue === state.parameter) result = state.name;\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n  const deviceBoards = boards.filter(board => board.device_id === selectedDevice);\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"query\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"device-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"device-select\",\n        children: \"Select a device:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"device-select\",\n        value: selectedDevice,\n        onChange: handleDeviceSelect,\n        children: devices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: device._id,\n          children: device.name\n        }, device._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Latest Board Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), recentBoard ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Timestamp: \", new Date(recentBoard.timestamp).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Device ID: \", recentBoard.device_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), recentBoard.sensors.map((sensor, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor Name: \", sensor.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor Value: \", sensor.value]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor State:\", \" \", checkStateForIndividualSensor(sensor.name, sensor.value, deviceName)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No board data available for this device.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(Query, \"Xv2dxjYXKbrPHczxRrrR0E3Ag3c=\");\n_c = Query;\nexport { Query };\nvar _c;\n$RefreshReg$(_c, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Query","_s","devices","setDevices","states","setStates","boards","setBoards","selectedDevice","setSelectedDevice","fetch","then","response","json","data","_data$","_id","handleDeviceSelect","event","target","value","checkStateForIndividualSensor","sensorName","sensorValue","deviceName","matchingStates","filter","state","passCondition","device_name","toLowerCase","sensor_name","result","condition","parameter","name","deviceBoards","board","device_id","sort","a","b","Date","timestamp","recentBoard","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","map","device","toLocaleString","sensors","sensor","index","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setDevices(data);\r\n        setSelectedDevice(data[0]?._id); // set the selected device to the first device by default\r\n      });\r\n\r\n    fetch(\"/states\")\r\n      .then((response) => response.json())\r\n      .then((data) => setStates(data));\r\n\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => setBoards(data));\r\n  }, []);\r\n\r\n  const handleDeviceSelect = (event) => {\r\n    setSelectedDevice(event.target.value);\r\n  };\r\n\r\n  const checkStateForIndividualSensor = (\r\n    sensorName,\r\n    sensorValue,\r\n    deviceName\r\n  ) => {\r\n    const matchingStates = states.filter((state) => {\r\n      const passCondition =\r\n        state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase();\r\n\r\n      return passCondition;\r\n    });\r\n\r\n    let result = \"Default\";\r\n\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"=\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const deviceBoards = boards.filter(\r\n    (board) => board.device_id === selectedDevice\r\n  );\r\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n  const recentBoard = deviceBoards[0];\r\n\r\n  return (\r\n    <div className=\"query\">\r\n      <div className=\"device-select\">\r\n        <label htmlFor=\"device-select\">Select a device:</label>\r\n        <select\r\n          id=\"device-select\"\r\n          value={selectedDevice}\r\n          onChange={handleDeviceSelect}\r\n        >\r\n          {devices.map((device) => (\r\n            <option key={device._id} value={device._id}>\r\n              {device.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"board-data\">\r\n        <h2>Latest Board Data</h2>\r\n        {recentBoard ? (\r\n          <div>\r\n            <p>Timestamp: {new Date(recentBoard.timestamp).toLocaleString()}</p>\r\n            <p>Device ID: {recentBoard.device_id}</p>\r\n            {recentBoard.sensors.map((sensor, index) => (\r\n              <div key={index}>\r\n                <p>Sensor Name: {sensor.name}</p>\r\n                <p>Sensor Value: {sensor.value}</p>\r\n                <p>\r\n                  Sensor State:{\" \"}\r\n                  {checkStateForIndividualSensor(\r\n                    sensor.name,\r\n                    sensor.value,\r\n                    deviceName\r\n                  )}\r\n                </p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p>No board data available for this device.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAExDD,SAAS,CAAC,MAAM;IACdc,KAAK,CAAC,UAAU,CAAC,CACdC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MAAA,IAAAC,MAAA;MACdZ,UAAU,CAACW,IAAI,CAAC;MAChBL,iBAAiB,EAAAM,MAAA,GAACD,IAAI,CAAC,CAAC,CAAC,cAAAC,MAAA,uBAAPA,MAAA,CAASC,GAAG,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;;IAEJN,KAAK,CAAC,SAAS,CAAC,CACbC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKT,SAAS,CAACS,IAAI,CAAC,CAAC;IAElCJ,KAAK,CAAC,SAAS,CAAC,CACbC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKP,SAAS,CAACO,IAAI,CAAC,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,kBAAkB,GAAIC,KAAK,IAAK;IACpCT,iBAAiB,CAACS,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvC,CAAC;EAED,MAAMC,6BAA6B,GAAGA,CACpCC,UAAU,EACVC,WAAW,EACXC,UAAU,KACP;IACH,MAAMC,cAAc,GAAGrB,MAAM,CAACsB,MAAM,CAAEC,KAAK,IAAK;MAC9C,MAAMC,aAAa,GACjBD,KAAK,CAACE,WAAW,CAACC,WAAW,CAAC,CAAC,KAAKN,UAAU,CAACM,WAAW,CAAC,CAAC,IAC5DH,KAAK,CAACI,WAAW,CAACD,WAAW,CAAC,CAAC,KAAKR,UAAU,CAACQ,WAAW,CAAC,CAAC;MAE9D,OAAOF,aAAa;IACtB,CAAC,CAAC;IAEF,IAAII,MAAM,GAAG,SAAS;IAEtB,KAAK,IAAIL,KAAK,IAAIF,cAAc,EAAE;MAChC,QAAQE,KAAK,CAACM,SAAS;QACrB,KAAK,GAAG;UACN,IAAIV,WAAW,GAAGI,KAAK,CAACO,SAAS,EAAEF,MAAM,GAAGL,KAAK,CAACQ,IAAI;UACtD;QACF,KAAK,GAAG;UACN,IAAIZ,WAAW,GAAGI,KAAK,CAACO,SAAS,EAAEF,MAAM,GAAGL,KAAK,CAACQ,IAAI;UACtD;QACF,KAAK,IAAI;UACP,IAAIZ,WAAW,IAAII,KAAK,CAACO,SAAS,EAAEF,MAAM,GAAGL,KAAK,CAACQ,IAAI;UACvD;QACF,KAAK,IAAI;UACP,IAAIZ,WAAW,IAAII,KAAK,CAACO,SAAS,EAAEF,MAAM,GAAGL,KAAK,CAACQ,IAAI;UACvD;QACF,KAAK,GAAG;UACN,IAAIZ,WAAW,KAAKI,KAAK,CAACO,SAAS,EAAEF,MAAM,GAAGL,KAAK,CAACQ,IAAI;UACxD;QACF;UACE;MACJ;IACF;IACA,OAAOH,MAAM;EACf,CAAC;EAED,MAAMI,YAAY,GAAG9B,MAAM,CAACoB,MAAM,CAC/BW,KAAK,IAAKA,KAAK,CAACC,SAAS,KAAK9B,cACjC,CAAC;EACD4B,YAAY,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,GAAG,IAAID,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAAC;EAC1E,MAAMC,WAAW,GAAGR,YAAY,CAAC,CAAC,CAAC;EAEnC,oBACErC,OAAA;IAAK8C,SAAS,EAAC,OAAO;IAAAC,QAAA,gBACpB/C,OAAA;MAAK8C,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5B/C,OAAA;QAAOgD,OAAO,EAAC,eAAe;QAAAD,QAAA,EAAC;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACvDpD,OAAA;QACEqD,EAAE,EAAC,eAAe;QAClBhC,KAAK,EAAEZ,cAAe;QACtB6C,QAAQ,EAAEpC,kBAAmB;QAAA6B,QAAA,EAE5B5C,OAAO,CAACoD,GAAG,CAAEC,MAAM,iBAClBxD,OAAA;UAAyBqB,KAAK,EAAEmC,MAAM,CAACvC,GAAI;UAAA8B,QAAA,EACxCS,MAAM,CAACpB;QAAI,GADDoB,MAAM,CAACvC,GAAG;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEf,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNpD,OAAA;MAAK8C,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzB/C,OAAA;QAAA+C,QAAA,EAAI;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACzBP,WAAW,gBACV7C,OAAA;QAAA+C,QAAA,gBACE/C,OAAA;UAAA+C,QAAA,GAAG,aAAW,EAAC,IAAIJ,IAAI,CAACE,WAAW,CAACD,SAAS,CAAC,CAACa,cAAc,CAAC,CAAC;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpEpD,OAAA;UAAA+C,QAAA,GAAG,aAAW,EAACF,WAAW,CAACN,SAAS;QAAA;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACxCP,WAAW,CAACa,OAAO,CAACH,GAAG,CAAC,CAACI,MAAM,EAAEC,KAAK,kBACrC5D,OAAA;UAAA+C,QAAA,gBACE/C,OAAA;YAAA+C,QAAA,GAAG,eAAa,EAACY,MAAM,CAACvB,IAAI;UAAA;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACjCpD,OAAA;YAAA+C,QAAA,GAAG,gBAAc,EAACY,MAAM,CAACtC,KAAK;UAAA;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnCpD,OAAA;YAAA+C,QAAA,GAAG,eACY,EAAC,GAAG,EAChBzB,6BAA6B,CAC5BqC,MAAM,CAACvB,IAAI,EACXuB,MAAM,CAACtC,KAAK,EACZI,UACF,CAAC;UAAA;YAAAwB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA,GAVIQ,KAAK;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAWV,CACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,gBAENpD,OAAA;QAAA+C,QAAA,EAAG;MAAwC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC/C;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAClD,EAAA,CAnHQD,KAAK;AAAA4D,EAAA,GAAL5D,KAAK;AAqHd,SAASA,KAAK;AAAG,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}