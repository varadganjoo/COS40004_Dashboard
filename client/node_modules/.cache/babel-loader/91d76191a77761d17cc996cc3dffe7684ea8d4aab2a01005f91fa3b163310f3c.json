{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Modal.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Modal.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Modal(_ref) {\n  _s();\n  let {\n    device,\n    states,\n    onClose\n  } = _ref;\n  const [boards, setBoards] = useState([]);\n  useEffect(() => {\n    fetch(\"/boards\").then(response => response.json()).then(data => setBoards(data));\n  }, []);\n  const checkStateForIndividualSensor = (sensorName, sensorValue) => {\n    // console.log(sensorName, sensorValue);\n    const matchingStates = states.filter(state => {\n      console.log(state.sensor_name, state.sensor_name);\n      return state.device_name && device.Name && state.sensor_name && sensorName && state.device_name.toLowerCase() === device.name.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n    });\n\n    // console.log(matchingStates);\n\n    let result = \"Default\";\n\n    // console.log(matchingStates);\n\n    for (let state of matchingStates) {\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < state.parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > state.parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= state.parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= state.parameter) result = state.name;\n          break;\n        case \"=\":\n          if (sensorValue === state.parameter) result = state.name;\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n\n  // Get the most recent board data for this device\n  const deviceBoards = boards.filter(board => board.device_id === device._id);\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close-button\",\n        onClick: onClose,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: device.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), recentBoard && /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sensor Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: recentBoard.sensors.map((sensor, sensorIndex) => {\n            if ((sensor.name === \"BME\" || sensor.name === \"NPU\") && sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\n              const sensorProperties = sensor.name === \"BME\" ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"] : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\n              return sensor.value.map((val, index) => {\n                const sensorName = `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\n                const state = checkStateForIndividualSensor(sensorName, val);\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: sensorName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 105,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: val\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: state\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 25\n                  }, this)]\n                }, `${sensor.name}-${index}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 23\n                }, this);\n              });\n            } else {\n              const state = checkStateForIndividualSensor(sensor.name, sensor.value);\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: state\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 23\n                }, this)]\n              }, `${sensor.name}-${sensorIndex}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 21\n              }, this);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(Modal, \"cNp00MRMrR2DWBpPFcviSR9le4k=\");\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Modal","_ref","_s","device","states","onClose","boards","setBoards","fetch","then","response","json","data","checkStateForIndividualSensor","sensorName","sensorValue","matchingStates","filter","state","console","log","sensor_name","device_name","Name","toLowerCase","name","result","condition","parameter","deviceBoards","board","device_id","_id","sort","a","b","Date","timestamp","recentBoard","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","sensors","map","sensor","sensorIndex","type","Array","isArray","value","sensorProperties","val","index","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Modal.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nfunction Modal({ device, states, onClose }) {\r\n  const [boards, setBoards] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => setBoards(data));\r\n  }, []);\r\n\r\n  const checkStateForIndividualSensor = (sensorName, sensorValue) => {\r\n    // console.log(sensorName, sensorValue);\r\n    const matchingStates = states.filter((state) => {\r\n      console.log(state.sensor_name, state.sensor_name);\r\n      return (\r\n        state.device_name &&\r\n        device.Name &&\r\n        state.sensor_name &&\r\n        sensorName &&\r\n        state.device_name.toLowerCase() === device.name.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase()\r\n      );\r\n    });\r\n\r\n    // console.log(matchingStates);\r\n\r\n    let result = \"Default\";\r\n\r\n    // console.log(matchingStates);\r\n\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"=\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Get the most recent board data for this device\r\n  const deviceBoards = boards.filter((board) => board.device_id === device._id);\r\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n  const recentBoard = deviceBoards[0];\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <span className=\"close-button\" onClick={onClose}>\r\n          &times;\r\n        </span>\r\n        <h2>{device.Name}</h2>\r\n        {recentBoard && (\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Sensor Name</th>\r\n                <th>Value</th>\r\n                <th>State</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {recentBoard.sensors.map((sensor, sensorIndex) => {\r\n                if (\r\n                  (sensor.name === \"BME\" || sensor.name === \"NPU\") &&\r\n                  sensor.type === \"i2c\" &&\r\n                  Array.isArray(sensor.value)\r\n                ) {\r\n                  const sensorProperties =\r\n                    sensor.name === \"BME\"\r\n                      ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"]\r\n                      : [\r\n                          \"Acc-X\",\r\n                          \"Acc-Y\",\r\n                          \"Acc-Z\",\r\n                          \"Gyro-X\",\r\n                          \"Gyro-Y\",\r\n                          \"Gyro-Z\",\r\n                        ];\r\n                  return sensor.value.map((val, index) => {\r\n                    const sensorName =\r\n                      `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\r\n                    const state = checkStateForIndividualSensor(\r\n                      sensorName,\r\n                      val\r\n                    );\r\n                    return (\r\n                      <tr key={`${sensor.name}-${index}`}>\r\n                        <td>{sensorName}</td>\r\n                        <td>{val}</td>\r\n                        <td>{state}</td>\r\n                      </tr>\r\n                    );\r\n                  });\r\n                } else {\r\n                  const state = checkStateForIndividualSensor(\r\n                    sensor.name,\r\n                    sensor.value\r\n                  );\r\n                  return (\r\n                    <tr key={`${sensor.name}-${sensorIndex}`}>\r\n                      <td>{sensor.name}</td>\r\n                      <td>{sensor.value}</td>\r\n                      <td>{state}</td>\r\n                    </tr>\r\n                  );\r\n                }\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}