{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Query() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [states, setStates] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\n  const [selectedState, setSelectedState] = useState(\"\");\n  const [deviceData, setDeviceData] = useState([]);\n  const sensorProperties = {\n    BME: [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"],\n    NPU: [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"]\n  };\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => setDevices(data));\n    fetch(\"/states\").then(response => response.json()).then(data => setStates(data));\n  }, []);\n  const handleDeviceChange = async event => {\n    setSelectedDevice(event.target.value);\n  };\n  const handleStateChange = async event => {\n    setSelectedState(event.target.value);\n  };\n  const updateData = () => {\n    if (selectedDevice) {\n      fetch(`/boards/device/${selectedDevice}`).then(response => response.json()).then(data => {\n        if (data.sensors) {\n          const filteredData = data.sensors.filter(sensor => checkStateForSensor(sensor));\n          console.log(data);\n          setDeviceData(filteredData);\n        } else {\n          console.log(\"Received data does not contain sensors:\", data);\n        }\n      }).catch(error => console.error(\"Failed to fetch data:\", error));\n    }\n  };\n\n  //   const checkStateForBoard = (board) => {\n  //     console.log(board);\n  //     for (let sensor of board.sensors) {\n  //       if (sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\n  //         const sensorProps = sensorProperties[sensor.name];\n  //         for (let i = 0; i < sensor.value.length; i++) {\n  //           const sensorName = `${sensor.name}-${sensorProps[i]}`.toLowerCase();\n  //           const sensorValue = sensor.value[i];\n  //           if (checkStateForSensor(sensorName, sensorValue)) {\n  //             return true;\n  //           }\n  //         }\n  //       } else {\n  //         if (checkStateForSensor(sensor.name, sensor.value)) {\n  //           return true;\n  //         }\n  //       }\n  //     }\n  //     return false;\n  //   };\n\n  const checkStateForSensor = sensor => {\n    var _devices$find;\n    const deviceName = (_devices$find = devices.find(device => device._id === selectedDevice)) === null || _devices$find === void 0 ? void 0 : _devices$find.name;\n\n    // Adjust sensorName based on whether sensor is i2c type and has array values\n    const sensorNames = sensor.type === \"i2c\" && Array.isArray(sensor.value) ? sensorProperties[sensor.name].map((prop, i) => `${sensor.name}-${prop}`.toLowerCase()) : [sensor.name.toLowerCase()];\n\n    // Adjust sensorValues similarly\n    const sensorValues = Array.isArray(sensor.value) ? sensor.value : [sensor.value];\n\n    // Check each sensorName and sensorValue pair\n    for (let i = 0; i < sensorNames.length; i++) {\n      const sensorName = sensorNames[i];\n      const sensorValue = sensorValues[i];\n      const matchingStates = states.filter(state => state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase());\n      for (let state of matchingStates) {\n        if (state.name === selectedState) {\n          switch (state.condition) {\n            case \"<\":\n              if (sensorValue < state.parameter) return true;\n              break;\n            case \">\":\n              if (sensorValue > state.parameter) return true;\n              break;\n            case \"<=\":\n              if (sensorValue <= state.parameter) return true;\n              break;\n            case \">=\":\n              if (sensorValue >= state.parameter) return true;\n              break;\n            case \"=\":\n              if (sensorValue === state.parameter) return true;\n              break;\n            default:\n              return false;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  useEffect(updateData, [selectedDevice, selectedState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Query Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleDeviceChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"--Select a device--\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), devices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: device._id,\n        children: device.name\n      }, device._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleStateChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"--Select a state--\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), states.filter(state => {\n        var _devices$find2;\n        return state.device_name === ((_devices$find2 = devices.find(device => device._id === selectedDevice)) === null || _devices$find2 === void 0 ? void 0 : _devices$find2.name);\n      }).map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: state.name,\n        children: state.name\n      }, state._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), deviceData.map(board => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: new Date(board.timestamp).toLocaleString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), board.sensors.map((sensor, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [sensor.name, \": \", sensor.value]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this))]\n    }, board._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(Query, \"Ot/U8/8FpIG8W7iHp6MdXwlT2LE=\");\n_c = Query;\nexport { Query };\nvar _c;\n$RefreshReg$(_c, \"Query\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Query","_s","devices","setDevices","states","setStates","selectedDevice","setSelectedDevice","selectedState","setSelectedState","deviceData","setDeviceData","sensorProperties","BME","NPU","fetch","then","response","json","data","handleDeviceChange","event","target","value","handleStateChange","updateData","sensors","filteredData","filter","sensor","checkStateForSensor","console","log","catch","error","_devices$find","deviceName","find","device","_id","name","sensorNames","type","Array","isArray","map","prop","i","toLowerCase","sensorValues","length","sensorName","sensorValue","matchingStates","state","device_name","sensor_name","condition","parameter","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","_devices$find2","board","Date","timestamp","toLocaleString","index","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n  const [selectedState, setSelectedState] = useState(\"\");\r\n  const [deviceData, setDeviceData] = useState([]);\r\n\r\n  const sensorProperties = {\r\n    BME: [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"],\r\n    NPU: [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"],\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => setDevices(data));\r\n    fetch(\"/states\")\r\n      .then((response) => response.json())\r\n      .then((data) => setStates(data));\r\n  }, []);\r\n\r\n  const handleDeviceChange = async (event) => {\r\n    setSelectedDevice(event.target.value);\r\n  };\r\n\r\n  const handleStateChange = async (event) => {\r\n    setSelectedState(event.target.value);\r\n  };\r\n\r\n  const updateData = () => {\r\n    if (selectedDevice) {\r\n      fetch(`/boards/device/${selectedDevice}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data.sensors) {\r\n            const filteredData = data.sensors.filter((sensor) =>\r\n              checkStateForSensor(sensor)\r\n            );\r\n            console.log(data);\r\n            setDeviceData(filteredData);\r\n          } else {\r\n            console.log(\"Received data does not contain sensors:\", data);\r\n          }\r\n        })\r\n        .catch((error) => console.error(\"Failed to fetch data:\", error));\r\n    }\r\n  };\r\n\r\n  //   const checkStateForBoard = (board) => {\r\n  //     console.log(board);\r\n  //     for (let sensor of board.sensors) {\r\n  //       if (sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\r\n  //         const sensorProps = sensorProperties[sensor.name];\r\n  //         for (let i = 0; i < sensor.value.length; i++) {\r\n  //           const sensorName = `${sensor.name}-${sensorProps[i]}`.toLowerCase();\r\n  //           const sensorValue = sensor.value[i];\r\n  //           if (checkStateForSensor(sensorName, sensorValue)) {\r\n  //             return true;\r\n  //           }\r\n  //         }\r\n  //       } else {\r\n  //         if (checkStateForSensor(sensor.name, sensor.value)) {\r\n  //           return true;\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //     return false;\r\n  //   };\r\n\r\n  const checkStateForSensor = (sensor) => {\r\n    const deviceName = devices.find((device) => device._id === selectedDevice)?.name;\r\n  \r\n    // Adjust sensorName based on whether sensor is i2c type and has array values\r\n    const sensorNames = sensor.type === \"i2c\" && Array.isArray(sensor.value)\r\n      ? sensorProperties[sensor.name].map((prop, i) => `${sensor.name}-${prop}`.toLowerCase())\r\n      : [sensor.name.toLowerCase()];\r\n    \r\n    // Adjust sensorValues similarly\r\n    const sensorValues = Array.isArray(sensor.value) ? sensor.value : [sensor.value];\r\n    \r\n    // Check each sensorName and sensorValue pair\r\n    for(let i = 0; i < sensorNames.length; i++) {\r\n      const sensorName = sensorNames[i];\r\n      const sensorValue = sensorValues[i];\r\n    \r\n      const matchingStates = states.filter(\r\n        (state) =>\r\n          state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n          state.sensor_name.toLowerCase() === sensorName.toLowerCase()\r\n      );\r\n    \r\n      for (let state of matchingStates) {\r\n        if (state.name === selectedState) {\r\n          switch (state.condition) {\r\n            case \"<\":\r\n              if(sensorValue < state.parameter) return true;\r\n              break;\r\n            case \">\":\r\n              if(sensorValue > state.parameter) return true;\r\n              break;\r\n            case \"<=\":\r\n              if(sensorValue <= state.parameter) return true;\r\n              break;\r\n            case \">=\":\r\n              if(sensorValue >= state.parameter) return true;\r\n              break;\r\n            case \"=\":\r\n              if(sensorValue === state.parameter) return true;\r\n              break;\r\n            default:\r\n              return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  \r\n\r\n  useEffect(updateData, [selectedDevice, selectedState]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Query Page</h1>\r\n\r\n      <select onChange={handleDeviceChange}>\r\n        <option>--Select a device--</option>\r\n        {devices.map((device) => (\r\n          <option key={device._id} value={device._id}>\r\n            {device.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <select onChange={handleStateChange}>\r\n        <option>--Select a state--</option>\r\n        {states\r\n          .filter(\r\n            (state) =>\r\n              state.device_name ===\r\n              devices.find((device) => device._id === selectedDevice)?.name\r\n          )\r\n          .map((state) => (\r\n            <option key={state._id} value={state.name}>\r\n              {state.name}\r\n            </option>\r\n          ))}\r\n      </select>\r\n\r\n      {deviceData.map((board) => (\r\n        <div key={board._id}>\r\n          <h2>{new Date(board.timestamp).toLocaleString()}</h2>\r\n          {board.sensors.map((sensor, index) => (\r\n            <p key={index}>\r\n              {sensor.name}: {sensor.value}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}