{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Modal.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./Modal.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Modal(_ref) {\n  _s();\n  let {\n    device,\n    states,\n    onClose\n  } = _ref;\n  const [boards, setBoards] = useState([]);\n  useEffect(() => {\n    // Establish a WebSocket connection with the server\n    const socket = io(\"http://localhost:3001\");\n\n    // When a new board data is received, update the state\n    socket.on(\"board\", board => {\n      if (board.device_id === device._id) {\n        setBoards(boards => [board, ...boards]);\n      }\n    });\n\n    // Fetch initial board data\n    fetch(\"/boards\").then(response => response.json()).then(data => setBoards(data));\n\n    // Disconnect the socket when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, [device._id]);\n  const checkStateForIndividualSensor = (sensorName, sensorValue) => {\n    console.log(sensorName, sensorValue);\n    const matchingStates = states.filter(state => {\n      const passCondition = state.device_name.toLowerCase() === device.name.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n\n      // if (!passCondition) {\n      //   console.log(\"Failed condition:\", state, device.name, sensorName);\n      // }\n\n      return passCondition;\n    });\n\n    // console.log(matchingStates);\n\n    let result = \"Default\";\n\n    // console.log(matchingStates);\n\n    for (let state of matchingStates) {\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < state.parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > state.parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= state.parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= state.parameter) result = state.name;\n          break;\n        case \"=\":\n          if (sensorValue === state.parameter) result = state.name;\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n\n  // Get the most recent board data for this device\n  const deviceBoards = boards.filter(board => board.device_id === device._id);\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close-button\",\n        onClick: onClose,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: device.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), recentBoard && /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sensor Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: recentBoard.sensors.map((sensor, sensorIndex) => {\n            if ((sensor.name === \"BME\" || sensor.name === \"NPU\") && sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\n              const sensorProperties = sensor.name === \"BME\" ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"] : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\n              return sensor.value.map((val, index) => {\n                const sensorName = `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\n                const state = checkStateForIndividualSensor(sensorName, val);\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: sensorName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: val\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 123,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: state\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 124,\n                    columnNumber: 25\n                  }, this)]\n                }, `${sensor.name}-${index}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 23\n                }, this);\n              });\n            } else {\n              const state = checkStateForIndividualSensor(sensor.name, sensor.value);\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: sensor.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: state\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 23\n                }, this)]\n              }, `${sensor.name}-${sensorIndex}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 21\n              }, this);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(Modal, \"cNp00MRMrR2DWBpPFcviSR9le4k=\");\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","useEffect","useState","io","jsxDEV","_jsxDEV","Modal","_ref","_s","device","states","onClose","boards","setBoards","socket","on","board","device_id","_id","fetch","then","response","json","data","disconnect","checkStateForIndividualSensor","sensorName","sensorValue","console","log","matchingStates","filter","state","passCondition","device_name","toLowerCase","name","sensor_name","result","condition","parameter","deviceBoards","sort","a","b","Date","timestamp","recentBoard","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Name","sensors","map","sensor","sensorIndex","type","Array","isArray","value","sensorProperties","val","index","_c","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Modal.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"./Modal.css\";\r\n\r\nfunction Modal({ device, states, onClose }) {\r\n  const [boards, setBoards] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Establish a WebSocket connection with the server\r\n    const socket = io(\"http://localhost:3001\");\r\n\r\n    // When a new board data is received, update the state\r\n    socket.on(\"board\", (board) => {\r\n      if (board.device_id === device._id) {\r\n        setBoards((boards) => [board, ...boards]);\r\n      }\r\n    });\r\n\r\n    // Fetch initial board data\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => setBoards(data));\r\n\r\n    // Disconnect the socket when the component unmounts\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [device._id]);\r\n\r\n  const checkStateForIndividualSensor = (sensorName, sensorValue) => {\r\n    console.log(sensorName, sensorValue);\r\n    const matchingStates = states.filter((state) => {\r\n      const passCondition =\r\n        state.device_name.toLowerCase() === device.name.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase();\r\n\r\n      // if (!passCondition) {\r\n      //   console.log(\"Failed condition:\", state, device.name, sensorName);\r\n      // }\r\n\r\n      return passCondition;\r\n    });\r\n\r\n    // console.log(matchingStates);\r\n\r\n    let result = \"Default\";\r\n\r\n    // console.log(matchingStates);\r\n\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"=\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Get the most recent board data for this device\r\n  const deviceBoards = boards.filter((board) => board.device_id === device._id);\r\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n  const recentBoard = deviceBoards[0];\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <span className=\"close-button\" onClick={onClose}>\r\n          &times;\r\n        </span>\r\n        <h2>{device.Name}</h2>\r\n        {recentBoard && (\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Sensor Name</th>\r\n                <th>Value</th>\r\n                <th>State</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {recentBoard.sensors.map((sensor, sensorIndex) => {\r\n                if (\r\n                  (sensor.name === \"BME\" || sensor.name === \"NPU\") &&\r\n                  sensor.type === \"i2c\" &&\r\n                  Array.isArray(sensor.value)\r\n                ) {\r\n                  const sensorProperties =\r\n                    sensor.name === \"BME\"\r\n                      ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"]\r\n                      : [\r\n                          \"Acc-X\",\r\n                          \"Acc-Y\",\r\n                          \"Acc-Z\",\r\n                          \"Gyro-X\",\r\n                          \"Gyro-Y\",\r\n                          \"Gyro-Z\",\r\n                        ];\r\n                  return sensor.value.map((val, index) => {\r\n                    const sensorName =\r\n                      `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\r\n                    const state = checkStateForIndividualSensor(\r\n                      sensorName,\r\n                      val\r\n                    );\r\n                    return (\r\n                      <tr key={`${sensor.name}-${index}`}>\r\n                        <td>{sensorName}</td>\r\n                        <td>{val}</td>\r\n                        <td>{state}</td>\r\n                      </tr>\r\n                    );\r\n                  });\r\n                } else {\r\n                  const state = checkStateForIndividualSensor(\r\n                    sensor.name,\r\n                    sensor.value\r\n                  );\r\n                  return (\r\n                    <tr key={`${sensor.name}-${sensorIndex}`}>\r\n                      <td>{sensor.name}</td>\r\n                      <td>{sensor.value}</td>\r\n                      <td>{state}</td>\r\n                    </tr>\r\n                  );\r\n                }\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}