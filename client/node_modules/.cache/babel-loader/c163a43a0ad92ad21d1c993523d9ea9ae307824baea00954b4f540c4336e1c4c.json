{"ast":null,"code":"var _jsxFileName = \"D:\\\\COS40004\\\\COS40004_Project\\\\client\\\\src\\\\Query.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Query.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AverageComponent(_ref) {\n  _s();\n  let {\n    device_id,\n    sensor_name\n  } = _ref;\n  const [timePeriod, setTimePeriod] = useState(\"\");\n  const [average, setAverage] = useState(\"\");\n  const handleInputChange = event => {\n    setTimePeriod(event.target.value);\n  };\n  const handleAverageCalculation = () => {\n    fetch(`/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`).then(response => {\n      console.log(response);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      // console.log(data);\n      setAverage(data.average);\n    }).catch(error => {\n      console.log(\"There was an error!\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter time in seconds\",\n      value: timePeriod,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAverageCalculation,\n      children: \"Calculate Average\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), average && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average: \", average]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(AverageComponent, \"IDLUuxCvaML1njbXD8GYy76eaKg=\");\n_c = AverageComponent;\nfunction Query() {\n  _s2();\n  const [devices, setDevices] = useState([]);\n  const [states, setStates] = useState([]);\n  const [boards, setBoards] = useState([]);\n  const [sensorHistories, setSensorHistories] = useState({});\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\n  const [selectedState, setSelectedState] = useState({});\n  const [averageCalculationSensor, setAverageCalculationSensor] = useState(null);\n  const [selectedScenario, setSelectedScenario] = useState(\"ALL\"); // correct the typo here\n\n  const handleScenarioSelect = event => {\n    setSelectedScenario(event.target.value);\n    setSelectedDevice(\"\");\n    setSelectedState({});\n  };\n\n  // Define filteredDevices here\n  const filteredDevices = selectedScenario === \"ALL\" ? devices : devices.filter(device => device.name.startsWith(selectedScenario.toUpperCase() + \"_\"));\n  useEffect(() => {\n    fetch(\"/devices\").then(response => response.json()).then(data => {\n      if (data) {\n        var _relevantDevices$;\n        const relevantDevices = scenario === \"ALL\" ? data : data.filter(device => device === null || device === void 0 ? void 0 : device.name.startsWith(scenario + \"_\"));\n        setDevices(relevantDevices);\n        setSelectedDevice((_relevantDevices$ = relevantDevices[0]) === null || _relevantDevices$ === void 0 ? void 0 : _relevantDevices$._id);\n      }\n    });\n    fetch(\"/states\").then(response => response.json()).then(data => {\n      if (data) {\n        setStates(data);\n      }\n    });\n    fetch(\"/boards\").then(response => response.json()).then(data => {\n      if (data) {\n        setBoards(data);\n        let newSensorHistories = {};\n        for (let board of data) {\n          for (let sensor of board === null || board === void 0 ? void 0 : board.sensors) {\n            let sensorName = sensor === null || sensor === void 0 ? void 0 : sensor.name.toLowerCase();\n            if (!newSensorHistories[sensorName]) {\n              newSensorHistories[sensorName] = [];\n            }\n            newSensorHistories[sensorName].push({\n              value: sensor === null || sensor === void 0 ? void 0 : sensor.value,\n              timestamp: new Date()\n            });\n          }\n        }\n        setSensorHistories(newSensorHistories);\n      }\n    });\n  }, [scenario]);\n  const handleDeviceSelect = event => {\n    setSelectedDevice(event.target.value);\n  };\n  const handleStateSelect = (device, event) => {\n    setSelectedState({\n      ...selectedState,\n      [device]: event.target.value\n    });\n  };\n  const handleAverageCalculationClick = sensor_name => {\n    setAverageCalculationSensor(sensor_name);\n  };\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\n    const history = sensorHistories[sensorName];\n    if (!history) {\n      return false;\n    }\n    const currentTime = new Date();\n    const relevantHistory = history.filter(entry => (currentTime - entry.timestamp) / 1000 <= parameter);\n    if (relevantHistory.length === 0) {\n      return false;\n    }\n    const min = Math.min(...relevantHistory.map(entry => entry.value));\n    const max = Math.max(...relevantHistory.map(entry => entry.value));\n    return max - min <= sensorValue * 0.01;\n  };\n  const checkStateForIndividualSensor = (sensorName, sensorValue, deviceName) => {\n    const matchingStates = states.filter(state => {\n      return state.device_name.toLowerCase() === deviceName.toLowerCase() && state.sensor_name.toLowerCase() === sensorName.toLowerCase();\n    });\n    let result = \"Default\";\n    for (let state of matchingStates) {\n      switch (state.condition) {\n        case \"<\":\n          if (sensorValue < state.parameter) result = state.name;\n          break;\n        case \">\":\n          if (sensorValue > state.parameter) result = state.name;\n          break;\n        case \"<=\":\n          if (sensorValue <= state.parameter) result = state.name;\n          break;\n        case \">=\":\n          if (sensorValue >= state.parameter) result = state.name;\n          break;\n        case \"==\":\n          if (sensorValue === state.parameter) result = state.name;\n          break;\n        case \"!=\":\n          if (sensorValue !== state.parameter) result = state.name;\n          break;\n        case \"idle\":\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\n            result = state.name;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return result;\n  };\n  const deviceBoards = boards.filter(board => board.device_id === selectedDevice);\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  const recentBoard = deviceBoards[0];\n  const device = devices.find(device => device._id === selectedDevice);\n  let deviceName;\n  if (device) {\n    deviceName = device.name;\n  } else {\n    console.error(`No device found with id ${selectedDevice}`);\n    deviceName = \"\";\n  }\n  const displaySensors = (sensor, index) => {\n    if ((sensor.name === \"BME\" || sensor.name === \"MPU\") && sensor.type === \"i2c\" && Array.isArray(sensor.value)) {\n      const sensorProperties = sensor.name === \"BME\" ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"] : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\n      return sensor.value.map((val, index) => {\n        const sensorName = `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\n        const state = checkStateForIndividualSensor(sensorName, val, deviceName);\n        if (selectedState[selectedDevice] && selectedState[selectedDevice] !== state) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sensorData\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor Name: \", sensorName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor Value: \", val]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sensor State: \", state]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAverageCalculationClick(sensorName),\n            children: \"Find Average\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), averageCalculationSensor === sensorName && /*#__PURE__*/_jsxDEV(AverageComponent, {\n            device_id: selectedDevice,\n            sensor_name: sensorName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this)]\n        }, `${sensorName}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this);\n      });\n    } else {\n      const sensorName = sensor.name.toLowerCase();\n      const sensorState = checkStateForIndividualSensor(sensorName, sensor.value, deviceName);\n      if (selectedState[selectedDevice] && selectedState[selectedDevice] !== sensorState) return null;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sensorData\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sensor Name: \", sensorName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sensor Value: \", sensor.value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sensor State: \", sensorState]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAverageCalculationClick(sensorName),\n          children: \"Find Average\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), averageCalculationSensor === sensorName && /*#__PURE__*/_jsxDEV(AverageComponent, {\n          device_id: selectedDevice,\n          sensor_name: sensorName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this)]\n      }, `${sensor.name}-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  console.log(states);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Query\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleScenarioSelect,\n      children: scenarios.map((scenario, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: scenario,\n        children: scenario\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), selectedScenario !== \"ALL\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleDeviceSelect,\n        children: filteredDevices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: device._id,\n          children: device.name\n        }, device._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: event => handleStateSelect(selectedDevice, event),\n        value: selectedState[selectedDevice],\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          default: true,\n          children: \"Select a state\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this), states.filter(state => state.device_name === deviceName).map((state, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: state.name,\n          children: state.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), recentBoard && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: deviceName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), recentBoard.sensors.map(displaySensors)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n}\n_s2(Query, \"yywQe0MsH6h6p7eP3EAiIwHcgOE=\");\n_c2 = Query;\nexport { Query };\nvar _c, _c2;\n$RefreshReg$(_c, \"AverageComponent\");\n$RefreshReg$(_c2, \"Query\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","AverageComponent","_ref","_s","device_id","sensor_name","timePeriod","setTimePeriod","average","setAverage","handleInputChange","event","target","value","handleAverageCalculation","fetch","then","response","console","log","ok","Error","status","json","data","catch","error","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Query","_s2","devices","setDevices","states","setStates","boards","setBoards","sensorHistories","setSensorHistories","selectedDevice","setSelectedDevice","selectedState","setSelectedState","averageCalculationSensor","setAverageCalculationSensor","selectedScenario","setSelectedScenario","handleScenarioSelect","filteredDevices","filter","device","name","startsWith","toUpperCase","_relevantDevices$","relevantDevices","scenario","_id","newSensorHistories","board","sensor","sensors","sensorName","toLowerCase","push","timestamp","Date","handleDeviceSelect","handleStateSelect","handleAverageCalculationClick","checkIdleState","sensorValue","parameter","history","currentTime","relevantHistory","entry","length","min","Math","map","max","checkStateForIndividualSensor","deviceName","matchingStates","state","device_name","result","condition","deviceBoards","sort","a","b","recentBoard","find","displaySensors","index","Array","isArray","sensorProperties","val","className","sensorState","scenarios","default","_c2","$RefreshReg$"],"sources":["D:/COS40004/COS40004_Project/client/src/Query.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Query.css\";\r\n\r\nfunction AverageComponent({ device_id, sensor_name }) {\r\n  const [timePeriod, setTimePeriod] = useState(\"\");\r\n  const [average, setAverage] = useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    setTimePeriod(event.target.value);\r\n  };\r\n\r\n  const handleAverageCalculation = () => {\r\n    fetch(\r\n      `/boards/device/${device_id}/sensor/${sensor_name}?timePeriod=${timePeriod}`\r\n    )\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        // console.log(data);\r\n        setAverage(data.average);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"There was an error!\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Enter time in seconds\"\r\n        value={timePeriod}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button onClick={handleAverageCalculation}>Calculate Average</button>\r\n      {average && <p>Average: {average}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Query() {\r\n  const [devices, setDevices] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [boards, setBoards] = useState([]);\r\n  const [sensorHistories, setSensorHistories] = useState({});\r\n  const [selectedDevice, setSelectedDevice] = useState(\"\");\r\n  const [selectedState, setSelectedState] = useState({});\r\n  const [averageCalculationSensor, setAverageCalculationSensor] = useState(null);\r\n  const [selectedScenario, setSelectedScenario] = useState(\"ALL\");  // correct the typo here\r\n\r\n  const handleScenarioSelect = (event) => {\r\n    setSelectedScenario(event.target.value);\r\n    setSelectedDevice(\"\");\r\n    setSelectedState({});\r\n  };\r\n\r\n  // Define filteredDevices here\r\n  const filteredDevices = selectedScenario === \"ALL\"\r\n    ? devices\r\n    : devices.filter((device) => device.name.startsWith(selectedScenario.toUpperCase() + \"_\"));\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(\"/devices\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          const relevantDevices =\r\n            scenario === \"ALL\"\r\n              ? data\r\n              : data.filter((device) =>\r\n                  device?.name.startsWith(scenario + \"_\")\r\n                );\r\n          setDevices(relevantDevices);\r\n          setSelectedDevice(relevantDevices[0]?._id);\r\n        }\r\n      });\r\n\r\n    fetch(\"/states\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          setStates(data);\r\n        }\r\n      });\r\n\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data) {\r\n          setBoards(data);\r\n          let newSensorHistories = {};\r\n          for (let board of data) {\r\n            for (let sensor of board?.sensors) {\r\n              let sensorName = sensor?.name.toLowerCase();\r\n              if (!newSensorHistories[sensorName]) {\r\n                newSensorHistories[sensorName] = [];\r\n              }\r\n              newSensorHistories[sensorName].push({\r\n                value: sensor?.value,\r\n                timestamp: new Date(),\r\n              });\r\n            }\r\n          }\r\n          setSensorHistories(newSensorHistories);\r\n        }\r\n      });\r\n  }, [scenario]);\r\n\r\n  const handleDeviceSelect = (event) => {\r\n    setSelectedDevice(event.target.value);\r\n  };\r\n\r\n  const handleStateSelect = (device, event) => {\r\n    setSelectedState({\r\n      ...selectedState,\r\n      [device]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleAverageCalculationClick = (sensor_name) => {\r\n    setAverageCalculationSensor(sensor_name);\r\n  };\r\n\r\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\r\n    const history = sensorHistories[sensorName];\r\n    if (!history) {\r\n      return false;\r\n    }\r\n    const currentTime = new Date();\r\n    const relevantHistory = history.filter(\r\n      (entry) => (currentTime - entry.timestamp) / 1000 <= parameter\r\n    );\r\n    if (relevantHistory.length === 0) {\r\n      return false;\r\n    }\r\n    const min = Math.min(...relevantHistory.map((entry) => entry.value));\r\n    const max = Math.max(...relevantHistory.map((entry) => entry.value));\r\n    return max - min <= sensorValue * 0.01;\r\n  };\r\n\r\n  const checkStateForIndividualSensor = (\r\n    sensorName,\r\n    sensorValue,\r\n    deviceName\r\n  ) => {\r\n    const matchingStates = states.filter((state) => {\r\n      return (\r\n        state.device_name.toLowerCase() === deviceName.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase()\r\n      );\r\n    });\r\n\r\n    let result = \"Default\";\r\n\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"==\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        case \"!=\":\r\n          if (sensorValue !== state.parameter) result = state.name;\r\n          break;\r\n        case \"idle\":\r\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\r\n            result = state.name;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const deviceBoards = boards.filter(\r\n    (board) => board.device_id === selectedDevice\r\n  );\r\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n  const recentBoard = deviceBoards[0];\r\n\r\n  const device = devices.find((device) => device._id === selectedDevice);\r\n\r\n  let deviceName;\r\n  if (device) {\r\n    deviceName = device.name;\r\n  } else {\r\n    console.error(`No device found with id ${selectedDevice}`);\r\n    deviceName = \"\";\r\n  }\r\n\r\n  const displaySensors = (sensor, index) => {\r\n    if (\r\n      (sensor.name === \"BME\" || sensor.name === \"MPU\") &&\r\n      sensor.type === \"i2c\" &&\r\n      Array.isArray(sensor.value)\r\n    ) {\r\n      const sensorProperties =\r\n        sensor.name === \"BME\"\r\n          ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"]\r\n          : [\"Acc-X\", \"Acc-Y\", \"Acc-Z\", \"Gyro-X\", \"Gyro-Y\", \"Gyro-Z\"];\r\n      return sensor.value.map((val, index) => {\r\n        const sensorName =\r\n          `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\r\n        const state = checkStateForIndividualSensor(\r\n          sensorName,\r\n          val,\r\n          deviceName\r\n        );\r\n        if (\r\n          selectedState[selectedDevice] &&\r\n          selectedState[selectedDevice] !== state\r\n        )\r\n          return null;\r\n        return (\r\n          <div key={`${sensorName}-${index}`} className=\"sensorData\">\r\n            <p>Sensor Name: {sensorName}</p>\r\n            <p>Sensor Value: {val}</p>\r\n            <p>Sensor State: {state}</p>\r\n            <button onClick={() => handleAverageCalculationClick(sensorName)}>\r\n              Find Average\r\n            </button>\r\n            {averageCalculationSensor === sensorName && (\r\n              <AverageComponent\r\n                device_id={selectedDevice}\r\n                sensor_name={sensorName}\r\n              />\r\n            )}\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      const sensorName = sensor.name.toLowerCase();\r\n      const sensorState = checkStateForIndividualSensor(\r\n        sensorName,\r\n        sensor.value,\r\n        deviceName\r\n      );\r\n\r\n      if (\r\n        selectedState[selectedDevice] &&\r\n        selectedState[selectedDevice] !== sensorState\r\n      )\r\n        return null;\r\n\r\n      return (\r\n        <div key={`${sensor.name}-${index}`} className=\"sensorData\">\r\n          <p>Sensor Name: {sensorName}</p>\r\n          <p>Sensor Value: {sensor.value}</p>\r\n          <p>Sensor State: {sensorState}</p>\r\n          <button onClick={() => handleAverageCalculationClick(sensorName)}>\r\n            Find Average\r\n          </button>\r\n          {averageCalculationSensor === sensorName && (\r\n            <AverageComponent\r\n              device_id={selectedDevice}\r\n              sensor_name={sensorName}\r\n            />\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  console.log(states);\r\n\r\n  return (\r\n    <div className=\"Query\">\r\n      <select onChange={handleScenarioSelect}>\r\n        {scenarios.map((scenario, index) => (\r\n          <option key={index} value={scenario}>\r\n            {scenario}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {selectedScenario !== \"ALL\" && (\r\n        <>\r\n          <select onChange={handleDeviceSelect}>\r\n            {filteredDevices.map((device) => (\r\n              <option key={device._id} value={device._id}>\r\n                {device.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <select\r\n            onChange={(event) => handleStateSelect(selectedDevice, event)}\r\n            value={selectedState[selectedDevice]}\r\n          >\r\n            <option value=\"\" default>\r\n              Select a state\r\n            </option>\r\n            {states\r\n              .filter((state) => state.device_name === deviceName)\r\n              .map((state, index) => (\r\n                <option key={index} value={state.name}>\r\n                  {state.name}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </>\r\n      )}\r\n      {recentBoard && (\r\n        <>\r\n          <h1>{deviceName}</h1>\r\n          {recentBoard.sensors.map(displaySensors)}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Query };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}