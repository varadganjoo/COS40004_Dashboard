[{"D:\\COS40004\\COS40004_Project\\client\\src\\index.js":"1","D:\\COS40004\\COS40004_Project\\client\\src\\reportWebVitals.js":"2","D:\\COS40004\\COS40004_Project\\client\\src\\App.js":"3","D:\\COS40004\\COS40004_Project\\client\\src\\States.js":"4","D:\\COS40004\\COS40004_Project\\client\\src\\Dashboard.js":"5","D:\\COS40004\\COS40004_Project\\client\\src\\Header.js":"6","D:\\COS40004\\COS40004_Project\\client\\src\\Modal.js":"7","D:\\COS40004\\COS40004_Project\\client\\src\\DeviceManager.js":"8","D:\\COS40004\\COS40004_Project\\client\\src\\Query.js":"9"},{"size":197,"mtime":1685000977763,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1683425629474,"results":"12","hashOfConfig":"11"},{"size":652,"mtime":1684336081559,"results":"13","hashOfConfig":"11"},{"size":7815,"mtime":1684493474493,"results":"14","hashOfConfig":"11"},{"size":1651,"mtime":1685082578969,"results":"15","hashOfConfig":"11"},{"size":882,"mtime":1684378114767,"results":"16","hashOfConfig":"11"},{"size":6956,"mtime":1685176131341,"results":"17","hashOfConfig":"11"},{"size":3156,"mtime":1685083372550,"results":"18","hashOfConfig":"11"},{"size":10552,"mtime":1685175876225,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"tk12kw",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\COS40004\\COS40004_Project\\client\\src\\index.js",[],[],[],"D:\\COS40004\\COS40004_Project\\client\\src\\reportWebVitals.js",[],[],[],"D:\\COS40004\\COS40004_Project\\client\\src\\App.js",[],[],"D:\\COS40004\\COS40004_Project\\client\\src\\States.js",[],[],"D:\\COS40004\\COS40004_Project\\client\\src\\Dashboard.js",[],[],"D:\\COS40004\\COS40004_Project\\client\\src\\Header.js",[],[],"D:\\COS40004\\COS40004_Project\\client\\src\\Modal.js",["50"],[],"import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"./Modal.css\";\r\n\r\nfunction Modal({ device, states, onClose }) {\r\n  const [boards, setBoards] = useState([]);\r\n  const [sensorHistories, setSensorHistories] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Establish a WebSocket connection with the server\r\n    const socket = io(\"http://localhost:3001\");\r\n\r\n    // When a new board data is received, update the state\r\n    socket.on(\"board\", (board) => {\r\n      if (board.device_id === device._id) {\r\n        setBoards((boards) => [board, ...boards]);\r\n\r\n        // Save sensor histories\r\n        let newSensorHistories = { ...sensorHistories };\r\n        for (let sensor of board.sensors) {\r\n          let sensorName = sensor.name.toLowerCase();\r\n          if (!newSensorHistories[sensorName]) {\r\n            newSensorHistories[sensorName] = [];\r\n          }\r\n          newSensorHistories[sensorName].push({\r\n            value: sensor.value,\r\n            timestamp: new Date(),\r\n          });\r\n        }\r\n        setSensorHistories(newSensorHistories);\r\n      }\r\n    });\r\n\r\n    // Fetch initial board data\r\n    fetch(\"/boards\")\r\n      .then((response) => response.json())\r\n      .then((data) => setBoards(data));\r\n\r\n    // Disconnect the socket when the component unmounts\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [device._id]);\r\n\r\n  const checkIdleState = (sensorName, sensorValue, parameter) => {\r\n    const history = sensorHistories[sensorName];\r\n    if (!history || history.length < 2) {\r\n      return false;\r\n    }\r\n\r\n    let isIdle = true;\r\n    let previousValue = history[0].value;\r\n    let previousTimestamp = history[0].timestamp;\r\n\r\n    for (let i = 1; i < history.length; i++) {\r\n      let currentValue = history[i].value;\r\n      let currentTimestamp = history[i].timestamp;\r\n      let percentageChange =\r\n        (Math.abs(currentValue - previousValue) / previousValue) * 100;\r\n\r\n      if (\r\n        percentageChange > 1 ||\r\n        currentTimestamp - previousTimestamp > parameter * 1000\r\n      ) {\r\n        isIdle = false;\r\n        break;\r\n      }\r\n\r\n      previousValue = currentValue;\r\n      previousTimestamp = currentTimestamp;\r\n    }\r\n\r\n    return isIdle;\r\n  };\r\n\r\n  const checkStateForIndividualSensor = (sensorName, sensorValue) => {\r\n    const matchingStates = states.filter((state) => {\r\n      return (\r\n        state.device_name.toLowerCase() === device.name.toLowerCase() &&\r\n        state.sensor_name.toLowerCase() === sensorName.toLowerCase()\r\n      );\r\n    });\r\n\r\n    let result = \"Default\";\r\n\r\n    for (let state of matchingStates) {\r\n      switch (state.condition) {\r\n        case \"<\":\r\n          if (sensorValue < state.parameter) result = state.name;\r\n          break;\r\n        case \">\":\r\n          if (sensorValue > state.parameter) result = state.name;\r\n          break;\r\n        case \"<=\":\r\n          if (sensorValue <= state.parameter) result = state.name;\r\n          break;\r\n        case \">=\":\r\n          if (sensorValue >= state.parameter) result = state.name;\r\n          break;\r\n        case \"=\":\r\n          if (sensorValue === state.parameter) result = state.name;\r\n          break;\r\n        case \"idle\":\r\n          if (checkIdleState(sensorName, sensorValue, state.parameter)) {\r\n            result = state.name;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  // Get the most recent board data for this device\r\n  const deviceBoards = boards.filter((board) => board.device_id === device._id);\r\n  deviceBoards.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n  const recentBoard = deviceBoards[0];\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <span className=\"close-button\" onClick={onClose}>\r\n          &times;\r\n        </span>\r\n        <h2>{device.Name}</h2>\r\n        {recentBoard && (\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Sensor Name</th>\r\n                <th>Value</th>\r\n                <th>State</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {recentBoard.sensors.map((sensor, sensorIndex) => {\r\n                if (\r\n                  (sensor.name === \"BME\" || sensor.name === \"MPU\") &&\r\n                  sensor.type === \"i2c\" &&\r\n                  Array.isArray(sensor.value)\r\n                ) {\r\n                  const sensorProperties =\r\n                    sensor.name === \"BME\"\r\n                      ? [\"Temperature\", \"Humidity\", \"Pressure\", \"Gas\"]\r\n                      : [\r\n                          \"Acc-X\",\r\n                          \"Acc-Y\",\r\n                          \"Acc-Z\",\r\n                          \"Gyro-X\",\r\n                          \"Gyro-Y\",\r\n                          \"Gyro-Z\",\r\n                        ];\r\n                  return sensor.value.map((val, index) => {\r\n                    const sensorName =\r\n                      `${sensor.name}-${sensorProperties[index]}`.toLowerCase();\r\n                    const state = checkStateForIndividualSensor(\r\n                      sensorName,\r\n                      val\r\n                    );\r\n                    return (\r\n                      <tr key={`${sensor.name}-${index}`}>\r\n                        <td>{sensorName}</td>\r\n                        <td>{val}</td>\r\n                        <td>{state}</td>\r\n                      </tr>\r\n                    );\r\n                  });\r\n                } else if (\r\n                  sensor.name === \"GPS\" &&\r\n                  sensor.type === \"uart\" &&\r\n                  typeof sensor.value === \"object\"\r\n                ) {\r\n                  return Object.entries(sensor.value).map(\r\n                    ([key, val], index) => {\r\n                      const sensorName = `${sensor.name}-${key}`.toLowerCase();\r\n                      const state = checkStateForIndividualSensor(\r\n                        sensorName,\r\n                        val\r\n                      );\r\n                      return (\r\n                        <tr key={`${sensor.name}-${index}`}>\r\n                          <td>{sensorName}</td>\r\n                          <td>{val}</td>\r\n                          <td>{state}</td>\r\n                        </tr>\r\n                      );\r\n                    }\r\n                  );\r\n                } else {\r\n                  const state = checkStateForIndividualSensor(\r\n                    sensor.name,\r\n                    sensor.value\r\n                  );\r\n                  return (\r\n                    <tr key={`${sensor.name}-${sensorIndex}`}>\r\n                      <td>{sensor.name}</td>\r\n                      <td>{sensor.value}</td>\r\n                      <td>{state}</td>\r\n                    </tr>\r\n                  );\r\n                }\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","D:\\COS40004\\COS40004_Project\\client\\src\\DeviceManager.js",[],[],"D:\\COS40004\\COS40004_Project\\client\\src\\Query.js",["51"],[],{"ruleId":"52","severity":1,"message":"53","line":43,"column":6,"nodeType":"54","endLine":43,"endColumn":18,"suggestions":"55"},{"ruleId":"52","severity":1,"message":"53","line":95,"column":6,"nodeType":"54","endLine":95,"endColumn":8,"suggestions":"56"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sensorHistories'. Either include it or remove the dependency array.","ArrayExpression",["57"],["58"],{"desc":"59","fix":"60"},{"desc":"61","fix":"62"},"Update the dependencies array to be: [device._id, sensorHistories]",{"range":"63","text":"64"},"Update the dependencies array to be: [sensorHistories]",{"range":"65","text":"66"},[1376,1388],"[device._id, sensorHistories]",[2890,2892],"[sensorHistories]"]